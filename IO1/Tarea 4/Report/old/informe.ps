%!PS-Adobe-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: informe.dvi
%%CreationDate: Wed Nov 21 22:17:20 2012
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMR10 CMTI10 CMR17 CMR12 CMBX12 CMBX10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o informe.ps informe.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2012.11.21:2123
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 700 2012-08-13 21:04:25Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.14, 2012/08/13
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 

  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 622 2012-01-01 15:36:14Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.02, 2012/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/UniqueID 5000768 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158168EE7932A2C9B7D7F820F327E4E36BF77D9D52F6CB8D69F1DA4C1DD1B6
646102107E5A6A7A6376AF4D646B3FCEE2C56EA5C8F822C5119642D7007672A5
DAF6F2D7D9F0C07E34D5594796765CBD5ECA4B65710166ADE5F16BE5F1C87748
1778614D372B043761D928D66FE1E2E484B8F621CA13423041FEE0B2198B6448
7D69075828A8936776EDF94BA40FACAA84F5BBC4E644BF418DF9BADDBFC959D9
76098471DD83E6B4C8F3FC4B80610530EB58E8FE9F61AD26306EC80B61711193
773F88ADD960E48997D9DDC2E2E42DC06FBEB17A0F5C92827B8E4090A599C321
ABFD2921EA305F6FABFC06F8CDE88D5846B65A57968169045BBC982779F9675E
B178A662B0BB82A3C5026D1FD039D3005DBB16B46A4FC0182CC43102F83DF177
E80E05D4DA73A25C6A565C40028F7F953785CEA2D0F4F2B4DFBA6FF4B0F4AF60
34577F47386A45E5EBC92E7E1779DFCE5BF03D55CE87C90AB7B1623E17D9D9A1
218FD3055B329B1EBCFD8B74798FB8A7B6152DD2047AD847149D8F1C5EE19F1F
7B5A81ED7163EC9CB7276F4DA0A23FD7779C3BC4B35BC7860E3334D225FDE04E
9446F179DFD00EA818900E4B671242E8ED5F2F93496031C306BF485D3E00F9F0
6744C4932A3B8B5EB3270D7E9641F848618381A9D12F0C35CE25CDE38B86FE67
5DF28CE98468399C235520DFEA7D3633FBCB4ACA5532639E15AA7365E4B354F5
09B7DA1AEDA1A73E9F5C1A6FC4B546798D0F3E2FC7EC19E2010A46B8D1368FDD
BAE9FE55162C55DC128ADB1C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/UniqueID 5000769 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 19 /acute put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 72 /H put
dup 76 /L put
dup 84 /T put
dup 90 /Z put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08A430B643B6ED36DCAA09B41
FEFDB90E10C8A8B74EB358437D0CEBB9E03109C593BAC09CA996278246E7CA38
4F311F23DC5A7F7DB374E0E3D066C874EEE28CFA47054DC41A389203BFB3D601
BC9A4817F8DAC250A102E7404CA135B33DD66F8FF40D106F52081FBA3E79CE29
FCA5C502B38C86D8D507AEF30436472D2381DEA09B8B3BCB109BCD72332A9483
E61ECF0F89A85BC37B8C10FF3F7C0A84FB8D0F4A7898D3F8B06202FF8DCD698B
56544751347E9AA35209B18D3D416E5E034E36D9C5FC0B33B7AA0D46F3A3F925
7FCAD9D6B9E25671F9AC599A40C37B2439C06FDFDFB3E78DCE515BE82B5BE1AD
2F205E8249407179559DF39CF29120C4B92C5283B609D0445B30F3AC71A1A678
8F43D8B12D7FD722606252CF4902733EA4B253778D28A16CCC64B5A6A8B1952C
81057F75D0A840FA6FFEAEEE59420ECADFAEF80EC2B6979DF2E5D8D9B72FF003
984C796940069FD15560CE44A39581BD97351004B79EB7B8E6E7C6B86EA7A969
F46793A3B35DC38A0A64918605EEEC6150D2D73BE37DD0A1B74438CDA81FE5BF
DF257F5BC0F22223677BD3BA8855AE286DFC5421D13DE1409CD2BC6DCECEF905
4E48ADAB65309E79F6277C883C1721B2EB6925E182DFCC0536E7C70D3AC58AB2
356631313FF5EA822D009931BBC3FD4FB8FA2F2AEFD561E66C18B80CE399D365
BBFED9888BBC4CB962B6A386B3C3C48A014A95E15C509A6B89089E799EEF6B87
32B356F51D93EF5660043BBFA956F0394C8D67EFACB6E4687C052B1D1784E493
50461EE1D78637F951F53D06207652583A41A2D09D6C9B50871B83CD6B0FF617
6C13E09BA059A08CA66CEAEE177F5771C767396DF3C6A3F2136A08652B057246
C24C90B20225C16911193A95D8936E7ABF92206E5F0D60772642F0A73266FAEE
14EB557FE1824ACDC41D66AF82893A3B69C3FCC0B8D531C05D115AFFDF38222F
7A01BA47B41B8F3F6F46748BB8BD9E26F4A6149B8D1DF4336072DD6C6C2EF83B
16CB8EA3A36DF5319B440F7D02E8F195ECA618A96E78E95F2D6465B54EE9D1D9
F4A6718B8DCF9B4FB641D52DBEA05177CD68375EFBB4367E4B443E02A1260253
76164CEADDE242166B902FC7E83926B764D2DE90EE9BAC254F407F66655AB519
F72AD9D9877AA528ECCF54EA69EACCF2217F5F8167D8B9765E1B7920CB489680
9B2D2C6C6D3B7AAA2F43485433E228A58FF9DD56FC0D32C7195C443B47021293
B4C0C682CD3B569C93C04D49006582EB7F4BF3F5938AA89A3903E8FC147D4E3B
89B06D7B51672391BB7F98003B1AF7980E84302BB8ED67B4456B6F45BD1F2155
ECD5B60C9D8633D2BBA3672F503192AD0C9F3A204AA41B8AE03DD9D8A8E7FEAA
A29F0AE5F18892E64A050FA44185D62296B9CADDBDAF78E769051D212D294B14
265D37FD248C2F837582E6D311EF14B6DEA21DA0F29A231C13815A3A5227611D
B840C6DB6F85B55D0625B05F2C7445DC8930FC2FFEC6F8D45C45CF01C34B1531
66198CBD9067A2E0F4610E5459CA329BD52C3C80802264D1962DDBF44AEC047D
893A130419D323C8B11AC8B7C43AEDA2696A278ADC5EA8F6EDD3D012DC2D1C31
DF93248FE07560C8B6E2F7E8722E34652C328C211560A70131A58238FFFEE9C2
43D14E4B01BE479EDCF025E615B1B613B62E07D8921EFCB39CCA5F5A8D60797C
BF931CD547F27114B5CCFA5B3DDED0B51607CA5F61E0CF7EC1C6F3918C2E338E
F39B476C839C555FC5931FF758EEAD8D2B4F5C3E7F7F1A639A1B93B57CC10C4B
39F210623B2406EE58369B736989B76A91534C25A6038048E446631A2ACA446B
444F34768802C0AF3B4A26E591351FC0D2000061F54C807D953B03C4438578D6
A5169DC337EBF5C10FFB4805FE425214B5EFB9836A2E45B266062541778CCD44
42C1F9A4163FEED7364D72E64B64CF01919DC62EDE6D295F56F340C278B94810
4127A22BC6D1810B76DC9A6D1C341948C37C536EE989431ACC4D80E735AB9838
E32FA92E723EA7057A3563A3E038FA93199B57E8C84E493E96F488093B3D5BF7
B8C54CC910BE2419471005968AA677D83F119E8F5C521AA895EC6DA90B99E27A
E38D717BF1CB704F687063DEBFD920B29CEFFDBE30F83B7381B8D3CAD190851A
AA80F08A3AD7E501188EC683694EEAD03EB75B4BF0176CA99DF5F4BC675D83F5
D851D3928EE10F6F826724FD52DE4FD85C1DCA859FA7A0F800793D8AFDFCD5E1
AA2463A687A8633340E14F2FDA57E95C091216765B9EF1E2EAB908688319C529
A9CD0AEFD53AAB8E9DDD47D87B05F6A0F5C1CC2EFCEC40CFDE2D3D7FA83EA038
6D76CC1AD44F7E1DAE477441A5C238847401BEA806CCE6D88F9354C8150505AF
A55601DAE34AD74C4F6EE462D4BC8BFD44A31325E1A95B22B83ACA006147AB06
2F177A9E8472B66F45F1BDE622EA7A3165579039BBF03FDF7F1CAB806544F93C
CE7393B7B3C973025AF66501623585C3EE823B0F817F310B324F1E237500BDE2
146C3835162BDF4A599CD42E62C8048E82DCC1A504CB4F3537C0492058653F17
78EAE89C97C66B7C47B375C6901957AE2823BEE8588C946F09DABC6C2B3C08CB
9E0CFDEE3984C5E2EFE9E5B00BC1B32AA45A2D81211FE93B95B0808C0E92A8B9
A161A76C8865C48B76CE5664ACE7CD5C7DD7A646FDD374FCD3FBB54E58EAD759
3D180E8082D221553FAF587C2E847BC5709B666D7ACF0D2C1D98C6738DABFC53
00472B2B5FA96FE06A013A15CA15B2AB3DBC1D6CA504FCDA4DD14291CB358A8F
64CD0CA26416784977DA064CE04A192DB893573A0CC8464A06EB45B494E07D62
FC58BC1F6F4C6729D035CDD697CD85B3FD7D9DCCDA7506230B7898398973B6AD
A3C7C021BF710479BAB437073FE6698BD1A43CC81F71179838C3B4E2FE367E6D
134692583EA73B2377911B3C3DFB358A1BDACDA75E3B74C640DC00E37BEB9945
FFDC9E58964B4CA44CAF454ADD5F699A7A04B9C1E26865052ECE0BAA373B1604
FF6BF1490FB3008B585D5A4459A9B855EB17F5082FC910C09B3FC6C4913AA49E
B3786EF77CB1E5AB9BE33E19E496B669D035CC812D46EC1FB248B470FCD192D0
C96C473D52B9FE121C33806553291395C141525C9DE797842B8A71E27D489113
F40EC7E2B7EEDD9E4381DBAFAC21DD65C796E42211E6106ED140D388B497AB4C
6946D746C2805BA693EC5D269191B465414C597DB08097E44E9E2533AF62D609
AA77E3AFCA5536818ED2671FE06A62010075F7F7D4DE851F8DEC2A738D89A97A
409EEEE981A1F9CB7BC8983FAC9390DB058C3E87FDFEE0100AC2D7D274578FC7
63181E16895B357759DFF75887D37410F9AF3B420D62361D742DBAE7F93AD3CF
F15B0421D9CB6B2734751F7DA71B40DFA2B407B8D6E267243EFD93098CEA0A9E
ED78405851DF5C1E3A16FDCE3B9D502A330B323D23B9BBE375A79D99BF8A2B98
2467C0D0D065D9974A316A55BB4454973BAE710E46C020E9572FC90EB3A26676
1BD544836DB896B40CB55982655170BBC17DFC064E7A818BE5CE2D2D036736A2
196DCA8CD5B7427BC9F17A9BE6B7C56C9816ADA3B144D9C9E76E90E8DD0EA123
A29F0A1DB96D6FDBB0F1193B92503DD5B6CDABCDAAFD9A35E7CAD5D2BD6F1ACB
0A1D472AA30C5FA0C53C204E4B7A47C0BDCE1161B9DE5C5666AB18DCD004A0BC
80DC9AD90E9E641BCF07E91F1745015D8FFCFADF2208638976AA4D35A17D8BA7
B2D035C2B387E3B4868DD9A13AE09CA6E898B50750926421355B00EDCFC700BF
6CF860C8303A5299D3AF79662470A90153E103A6B9AE1AE673AE5EC4ED5EB7FF
33B9FBAA77AE4D7B3C97C16198F9B56C981D79D554763F6162CBE42CAAEA0EE6
4AC3138979D31F21083827432EDF8B652F3C36C1E7F312F823C96C3D870303F7
A2EFF7CAAAA81F55AECB8CECD0141A17F94DD8C81EAB4293A7231E09949919A4
14C0224ACF9DD19430EA83E5EF1729552ABCD913FF5A2F04FF60FB9B2A5B9F6C
12E740A1D41C556B291F623BD1245357B2ECF4258A3B444B8AA79FB14DB7CE2E
426AAD8A8512DEAE8D181DEFE36A14FA734A98BE057E5C88B91ACC4C29B4BA14
4417AEF7AF6FA8B05B6C303FA258DFDE990DB3CAC51C84999F1FEB0728A70F05
BF8F8119F926AC421F76C368A0EAB34E03483AD5761CC9F6FDF37DBBC89C6C7A
769A565B9EC9E26BD053D98F78615199AB6CF395E5063512C03E1E69F6DE0E41
24306166DF6F104FA886BC4A5EA3B1BEDDF89A6F6767D1580FE13B1CF6D20330
307CC54DE5449B8A69E50969F815762BD7542820803344CB2FA7AB336A183376
79B4CA12560687864BBBFBE6477FCF586DFA67856525025C2AF2010818194D05
44F5EE68F77D6BEC57424ED7D4AAFA6463873F910096C11B24BAEC80752096AA
B79DDE0470E46D796B8E24E1C379AD2DC5D1C10C606D8F35D780C30DC3A4928C
1C278DCC73C32AB9B693D2CC3411A1A1926134FDAB963E383D25D7C5BE88F18C
7F1B0F53A0143ABCC487AB3DA04CFD6B956715982DC5742FBE0AFC25EA9FF149
DBD6030BFF141220D3D59A22F60047C07C6C6B102F1D75C2A5404F9C1D7A0232
1CBD6DD5DB4422665169BFB8FDF6B84A4DEC6F7A67243AFC9EC24C78ACAC8987
FD709B2D38A7A17C95FBBA248254337ACF048B503EB5688B14DA6EBC725D35C2
A59C332302210DD1B3B364509D830B06A3D0BDC66152F8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/UniqueID 5000794 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 16 /dotlessi put
dup 19 /acute put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 56 /eight put
dup 57 /nine put
dup 69 /E put
dup 73 /I put
dup 74 /J put
dup 77 /M put
dup 78 /N put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 117 /u put
dup 118 /v put
dup 122 /z put
dup 126 /tilde put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD6DBD2817CD57D7CCC2FAE2B14257C7214981A0678BB213832B04A68AB3631
8B23CA966781ABFCBD46714EEDB6F54568E2E17613658D4F62AAE1B2B4732FA8
F3F9BB87D30D771D591B8E7F59EC319B3C80C7DDB03B26C4A34300BFECE03FD2
8732CB57F2E95555F4EBC6F97D187D7F7BF406499A2B12B953D0AE1984D78EF2
399E862A24DD788C8C23E5A620F4FD4BDD641715A50B543CA1C4DBC2B2F72F6D
19FA0C4EFE4E73FE9669F35AADCBCF96948C6A0F57223555F70B4116FEBF8041
0BD48817C5E2C69174395C9FAA22504E4A4F014CEF38F16D931E1077F8788685
8AF74DC1D5C7DDBBA0E4974CA7890B785D302C38EF46098F42BE6DC19566B7E1
3900E1760FD9347D3B597E451CBA9F7D4EDC10BA86DE1D6874AF13B3B301CE33
5868DFFF1DB2F09376AAAA4269D8F2F00169886D986002E213E218294D10E3A7
E0FF98B41C6B8ADCC8A4A5ADBEAF6BFDC2521C25A923EA9D47303789EFDF5284
71FBE5231F8D13431B465E0CBB4D4C9B7FD27B2D7E0EE994CA09B71FB1E6ACF7
2E65FCBB055CAEBD54AD8B55736EE6E0BA42E148979D3DDCA92D926472974F68
10CE09044D449AA33B54598BEA6B0C19173D2BBDCC503A6733E4558B797C1A87
AD674A2D815A222BE811B4B85CBAA63B0188EFBFA774A0BB4762294CFD437BDC
92C01A36BCD52D80C4C5941EC3F728024C3ED01326B597087BD2A8188A019445
FDF78A8B66C6842DD711A0F73B08216097F7347D53567BF58497ECE9A377091F
C986DA27F4C3D783EF829E3A431232C4B478542A4BBFFD273095D733F469992A
5709CF8529AE22F5878209016EC557599C95C1BB7A41BC9B1C8D21C09A7EAE63
B778E4F41FD44A15A75F836EF37404A3036B1FA6A9A7366205B67FD2F87B602D
863CE04B00E6D8F83FFE94CF207C26F9A4F3D1B1B84960F0FB4DAA5333BB3BF9
03C610560129BB7838E614DC8E1CEE4366D3DF6F4C8FD8BF28DCF638B41E1247
D78FF8123625A297EF71DC0194058DFE3D06DE2FBDE4D2B6BDB09DF20F9EF044
D6FEA5026936F61851D521011CE1743969AC8700BE21A783DE3827A7D8A4ACE4
7437E243041BF0D01C8DCBFCE2CF04E2DBA88AA4EB31C3247477D3AF9A926DA7
33CB153C6B78E13E63798682032EA9D646305832A12A276F6F3C42D041B4CADE
EC0AC5F205E9351C05DFD5CC7251DCA1C4FC090D2F35AE60C5ADC001AAF99E57
5F200A1DE792F1A4185B1628CEE71BF4987F7203DDCE938A6997FEDAC6F7C469
9C267E2FE0F129BA6DFE722A8E0965E2860A2A5F3CC4F9209ADF92A39FAA5319
35BB852024720B3427C7C64F7F4337E851D828E1500B0DC8D6428222502895FF
DCD12BE63CF7A9AA70872D927F5C7A76E2AAD44B388114CBB382FDA40296A29F
EAEEA29240DEE448DE5E2E275F3F4C5E1383C15F508C06E52305391DF7CC481E
9266F331151A3AC1424F2CAE6956CA14E87EFE669AE21E6B841B9C7E21795AB4
EA1605C05DCFB8668772C989BE92AF2690E2E28136ACDA33A7E8E16F32DCA014
6E9E5F0EF497F8EF0AF3D6F08F1558DF04B335766BBFC45B03790ABF59689A2E
2F2D6BC56F57D73E7D6EAEA31E4D8096BEA1073398585F719D55C3D0E51E0C9E
AD93867A7493CBD9A5C82E5BAC5443799B2013D8542A85D7C32729D382525D70
46E575768E8874FC95F610F979B69FA1C06425475FA2F9B92EEA80ECA9D178EC
38AD1BC807A135D7AE5E80ABA032F8FA24C18D4E3888531D049CE92FFD38E99C
AF0DEAC36DFE259908EE0CFF06AFB2E269FCD5C1F0342B96B9E7449DB0EDA9E4
3B77B81831F0DC4638CE1008CC1D1DCF8692BBC55A1482881F6548E64A30269C
33EA997AC7984BD425AB60E5FD82769184FFC0E982C8AF6602459BA6601B56CA
7CA556077FE5A07DD744617E8032787CDFE85C08AFC3A5DF9A7404939FCCF918
6F4FE41DE338A1A94D57687073CFA47CBC1D0737784F1A44506C2B7B508CE93B
3EABFEE7FDDBDC0F878DD65636A58A874790EF2A1D3D86223A965BEB0E593212
FF517C5D9177F7A72DCD144FE8272D6AB333ECD6BFCDFDFC9B0E3C573BF36734
8FFFA77E1D4E0AA1C104DC413A653B0C04D68E08D644C5F299D2BC0DCF3811EF
697A32926303691D4AE1C9860066DA443C33CF0DA34624A1D8D3D8B90F79535D
E511328C0780AD201295EDD0603FFEEA8E0930EBDE9488C855936EF155DC3D31
12E14A85462E5C06562D9480FC128D909C510E10F9230D41F3FA5BF0A729D385
519683A9347C4D2622BA3C6AF6F93D1AE0272352FB5D7719D597E041AD7947D8
2D45E3E95F1785A1C62D8A143B768282AD8D6F93DD5667CAAB303E6459C15A17
C1205D1D27D8290CC64526332837DF485D5C8F90F359303D09520B25D02A9029
91F571716DC91A559195F1E0A79AEAB7678F96A4B3894F55C02989F424517EA9
76BF32AE29F9ABC9A4976A39FF9E4F77A9D97763DDF325ED202B1CFE9A237632
367EF5D521642C12AC18BDF14E473D82523677EDA48559864D3A0C0ED5E2215F
1DD7166FA3149C85D690E5C5806E75E066083646D6250B96513966BA792B5D2F
0E33990A4B54ADB463D17EE57E6C7CF80384DD7343789825EEF17FEC434D3993
2975360B4DC1BB5E0D024C2E24B0DC44B02D80C851690AAEAF4AA1C3EADEEA57
2F6CFA41925F927EF6C0B1AB3D5EF480C37EF0B9DF23D73B9AF3DDDC9ACAFFFD
DC442D54E34E58CD0F20D1C5299AB70663AE9B98709EDEC111E88490DA53DDFE
E81E00ADAF0DACE1FCA9624FE1DB86B50D00656AEC5ABA7396F1BA16510BEB5D
2B13954A09FE620AF4722BEF9C7BFB1CEC6A35C7A6E1B67BA802B53E7FE2F533
0C636CAC57063413C61862DF30FF6B37E44CE823C83BB970C44804D633000022
4EA9F9A0D2322C8B3C0012BFD3973297370B64C19DF0E0965E91865877B930D4
D35DC8D48B6EC7140CD69BF394A0FFE0BAE79EC40AAB7335D725646867FE01DB
C054C8035344AED01C2D6F20AFAACE5CD75544C8894887242858376911CFA972
D45CCF25E4C8A7CDEDA3682D168FAC85F2C986B12C9F37249F6851C124172769
93D94F77DEA6B7BADC6B6108BE5541AA731DEEDBE7884330A5DD3BF57DB3E160
82FA92AE9DDCE66E945E10B35D843EE96906D55AE72A41C538CF54CEB6FD44B8
3119313BE25BBFAEF089661B244D3121134A341CC532AC78068614CE58C50A6B
25686613F36D13E9B18B81F0058D318357D376B7B75B9E98D1BAE94DDB6BF55C
3D40D4AB981C7F01CFB0617A54DCF057A398D064BA86F2931AB975C0FFB3BCB3
0C829E34A1668EB98E0BA92C5134568FC039EF7FA9C3D7504F4A6E7EFCB1F326
981F27220E49428920A0A33AD01D5047DA9194B3849FE1E255C4EAC52D454569
0AA40ACF63F04C74491BEC7484984C4D65D471ECD1445591923E6CB130BBD9D3
4B13ABC556CA0FBA5488CEDB8AF47B3A910377293EE083BCA53F0E6723FBB1A4
72B5142440ED65A0AC52E8D9EFCC0C9CC6FF7DAED27623F2E2244166DF83B323
616EDEC2DB5A5769EC8E39E777E98D7D335B48B374BA3536B2F02200F1C2BF58
45729DB7C1B642040D3E9F0305B3ED5519264A016552882E7348E6515872076F
55AFF1CAEFA9CE0CA619C5F6D8936E40A54D87AF1195704B94AA96C950656664
352AA16A0C6C5B675589CCC2593C32423CA8956B412E3BFEA514DFAFFDB8D0FA
7EAAC080DD17B1E584B312D1561E24B5163444692ED2672B8D820FDB61667645
A1471E14209EEE7CD62CF529DB8CD4FFB0EA1C2ECECD06EADC317520F7657C91
4960D767CE3FDA74FF3E47D16F3EAAC227E9D7CA4D72EBB44055BB1812BED9AD
2F8A3091C31C3FEDDF5BA71C26A94D2EDA47B294E4E97A3979EF3BAAC5B11FEF
E1859050165ADC4C980F3499983998BDD415F0CC0D10E7877D3E536B8B0E2734
6589B11525EA321C6962C7DB1857EDFDFF0656D91A4B132AA7D8154813D80FFE
8974BFE91E02F4E53AE270274C0D698F5BC45F7EF0980771348C52C665F28761
B9135AD7E5AE03A05DCE57D3AF7B73A8C2CCE527A9310106CA5DB6D2ECC825D2
C1111F5739BBDB13DD03146D48B59EC89D0B1339853C78A79B3870D104B8A0A6
A6FCACC79026030E8C204E74BBFD6F8AFF39DB9B842DC61BD4DC2CCEED44B31F
F681EAE2288E8D77F804540EF5BB91FCD8A21153C990D7F87D5F977B27034459
43EEBF47EEE51A674EE05C1779053E50251FF6A50297D26713DBDD7586262BE8
CEBF0231171B06FA2C8414173541FC60AD37CB40C1497826BABD1D5AD4D7F47A
38806EA61DC59198686BEE67650F03E157C4FCB6E0B19E17097CBC40C4287873
3D50D10778C7842CF44F70F9FC19E954410C54345ED3BE652544F2B72578128E
0429A93F0896FC24065FC85929780593DD6E07044549C0A51BDF7301DB4141EE
E554173AFE518AE5F49DFC898B565FB4194006CCB4BC3C934288BE8829D0DA28
7CD54C30D2C1190F84582586E6E8AEA48370E3E7D785D35D2348019C245CE867
A5A9173B668B91AA5C0A4DCB776625C5F46CB299D6F96560FAC6048AFA455C38
532C4C625BE1E7F572D48C688BD9844ECF583924C86E9105DAC21A3CB4ED4175
C4716B763D6F020CA4C781E16E434180CEC1C8A4BF62E4789176F48D6DAF5AF1
1D5D07B95C374CB090BF74F87A8B970CC27DC43363B0D205730B291E8A27BE1C
3E535786EA32CAAA82C520888AD5CF5AC914E7A79A3AE8B0B2053E697EC9C749
370954780DEF1F32545EFC59A0B8D1AA1E8FE2A7F156A242F17F8FF67E5D77E7
31B0C69CC6B84799AC9D612DF3C3701F80C2395A2DE9A09E6374D95917BD4717
0AA0B6FDA51CD8D738A463328713E2F1E82ED2B2D14FA9AAEBEBE254B669D65D
B0C89E91F3D7FB141AF9260A658B53BC22846E128342B4604D71779B899706AD
5B63C6691A41A1C5F64BA569B75D98BBB45B91E08D9FFA98BE25358A46A1D249
74BC7D85347F186A301915E40000963A3B7F5FE47FB0971DE73FB4C223A8DA23
2442319CD8BD100C7C59511673772295BEE2B47C6CFD7FA27CAF78ADE10AE994
34C716D03DAE85B485816F0BD5D5310163C7E6D1AB8B84FBEC4EF4151D3FF578
67A8685423405F7F4329A968494217E7F75A2A0A137C3AB54F3888D85E05643D
3CFAB80C0013CB3A4B071AC27A288C7122483C599DA3C11FF0AC47712342E36E
A0324D90B899BF23D1C89A5AC8D0A2B4297BA7CE7B2009EA1205EC3509652519
715590F6A1EAB16DB71799DBE800C74D3080C20DF986D9CCB0E72F0A3BECBF9A
22FE113963D54BE03150CC3CC59EF0A4CD91F1FF2DB00CE6E023368EF55DEB2B
0E9D906C7568900465D114CAFFAD50A6A9BE7B513F4D195905EB26B68B5CA696
9BB561BF7E3A8374D7536E7B11B63FB6E14615EB907BE13D35F914AC6E3EF4DD
3AF4A734ED238E8E6A0935E05EA790585CFA813141DDD2C5E54E60012A91C782
5763764D5C96524F0DB4ECA5501EA3C3388D03A566EFB7C85B982A8B1BD2DBA4
C20760468E0AB1620CF51744006FE9FF704579013287F077F13054D1B63F5879
9A78AEDDC6E37AF34F7E24103F3687F92E591C99C512412855BB83C674F365ED
A4D2A33EEB90DF125C0DC7BB904BD09ECDB0DB9BA4ABA1A8D73DD360B1CC1324
6D3193454DEABD219FC4B17EB2B45AF6B92423A7866CD96220C289198D8F337D
F37F65884345B7D5F625F5F80C21CEB512C91DB389074A205203CAF5D55E144A
2568826220DD599AB8E731AE02F60EEE6BC38E3C540F059C515DA8A73567ED8D
A5B1B48FA5957A93C76562CF21BC9209D4DD20E61BE5FE550A4D6C1166097898
28ADAC1B6F901F0351FB12180FBDA06D9FC0E43C7B98ACB1D19DA63FCE3BCD1B
D3DEBF35EA8A4622B4052E05A25D2FE789DD5585B9227320F908242E8650BF0F
E0D0292756CC339BE68BDABF234D54144A05488696C489BBBAA42A5EB7F67F54
91F4E28E873BCB257A473E612BA5A79B6AE0DC5BCFC14181D311939075210179
5F136C63C4B705BC31B5F67211E5CEC76EC73EE44F0CEB951D0DED770B616AF0
940610481EEC886763E60CFD5652BE2F2D1BFA148284EBC7DBA014E0F7BA16C2
88DD52BBFE39D11A9D53C18C349256B285B22827F6136CFF46368E67C2602FE5
97654CA490001F391A693B8C3776D9424DF3F0B6F54F67355586D1482CB49AE9
8AA241AF8605ABE37DE0FDFAA11B10E602D2AA2289751C0BAD57EAF6337B5C57
86156AEA0FB0E527BF2B9688E6312BB5B26A6502AD9FB72610F1DE4A8E76900F
C112247888AB211AF0D570521AF2E249DD1EB41813E3BDCE2E55F0C41A2EF924
5C9A3EB860EA131B4C872C44ACEB7FF68EC999CCE791FBFC3BBD32EE68B869CC
0C24A46714979A39A5A09874011651FEB3B7CE17ACB524AE8E2013C94BFCF1D3
D32B7C27ACAC2B8F3CB7E3B7345C9B99D5C2F440EE398C27F1917EF40B2B85B1
3CB1E6216604F4FD34E2099484BA2752D041B0B9DD31FC2F2B701334300ACC64
585C2055394F2A1B7835ADC6716F5ADF1823E407C59C4BF87D4E217FD1207472
AE651D3E2A7A88019EB53A72EA33FDCE1CFEC6BFAA8FE28A1767ACCA9527AF95
20E15145B016EF3A8E4A45E4C473D6B99A762EDF717AF26E1AB8FD7C784ABD77
4BBE76BFB25F0D0C413F4F42437CCC45CC2EF33BDFF47822CFE2F65ABFD83F71
3CD26D260998B8123DED9709A87510663BC60DC3FF7D57661C69E31BC80672E0
923DB3B9E04226AB7E163101A58B34BC16D662870FA554007898907C1C659975
441CAFFF4595FD9AC51DB5D7429D0CEDE6B2AFED48B4CAF59389C208F3A1D223
AC8A6C9E0F0853031B204D3856F2710C1CCEFAA0CDCFF872BBB8C58EE3614E27
E5CBBF5373F6DEA9938B14953537F50ECAC49712AF7F17C35A41271A5D0B990F
9DCC1A1759DE0AB382D2E50CFC0E6D9CAE3ADA872807EA0635C14D573D7538BF
0DDD591B5F000843C1B9A2E1C060C3A16F83BE3919E6D25B812555341DA569F0
A1407C8FEDABCB98B032F9C5C3F28FED347B6DB605F4014DC8E6F4444B0F6929
532827AF6F568EE3C9DD30CB7D05C120E931DFBC20BFC582E155200926AB7B02
7B6EC9F6A488AE81F67E8D45FEF916841381282F9A64F2294517695992A6768B
1BB15A67F7871EF53F1AC0DF0B5D416CFB976746CB3E1A8877185338F2A66842
8329702C32C2B6183CA0BBF1F4A13FEE600259A880FD8BD66A45BBB420155831
F6EC1E6EED6EE3F18F75EBE0DAB8665ED2E93BEE50AC5561BE4005AFA630968E
23437DDCA2C4FD6D8604E1D2459A662EFC22352598AEF62E9F7235605247DB61
FA461590079F30A9190CB1ABDDE5B4E8F11421D2838148160AA03A429BCF443B
629A650BC0B02E35B3E1D05222B8E90B85D07F9A8FA8A7A84D480F198F5AB3E8
EF254DD88F7A3DF8A245BD08993235B62B30AD2B3B2E2E95506FBF368B5835F7
E5545E12BD7EBAC32B93B36DC34FFF9BDDBFAFB0702782DC34DDF8CEC3C4A83A
372212FD7E7FEE02786E1C6CD8693EB838DFAA08D9F4D70AC62EFBBEF066F3B0
FEC488EA6D90BB0A45E43FEB7C2EF493F879FD8C16CCD8358CE95858B9DA9EF3
3D2C67CF48FC5DAD61EE60DECFBDDA58296549F08355A9A651DC3914382758CD
89B70D738335BDAB7814258AD558CAC254092E33843FE9C397E8612D9B6B686D
8FE654FEC971D13AACB280EB559729BAFB502663436A29C48545E756A165E7D6
52C0883A2BADA7B475D395A25D2C74DC636A59E9782C94F1E5DDF6E4F0DF06F2
F77066A673FB9567236B611FA8569458A50AFB8BE58AFF15232913D1D188606B
AB176055FD2CE934986376D7AF43F7C5DCE92C1BBF0268A6540FEEB3158AE22B
E4895A73BF4AED426D6B0C229947645D3E60D9BD1A55CDF473393E3E9B4DF930
5EB86CE2BB441F160B0B0D007E8E1B20B29779B7875DA98771CE092AC13679EA
61F45B7CB2048F1A88065D6DF5CCBBB3A8B3FB114DB51568534EACCE768714D7
43AB5CFEE8A8219776DC49ABAEE50A301414ECED1EDF032A21D6D98FB40FA208
5B687D8555899BE7B203950707AD98E85D7744D8AF707D94503AB4B3E4D245AB
A5416B1B9C565A7862F208DDCDA4C95CB777A41B7BA456E332864202FE311ECA
5403DD7904211C60086577F2FFB56921A7E9711D9B872CFCE56CCE15823515BA
5889AA8A067570576B33807ABCCDA360DFE4B3217CF3EA486F89885C6031CD59
F7FBD6F3BF5E6F8DD082D2F6E3468846EB17261C3451BC39A2E6933E73C375BD
10A134C0867A631AB7F843188EABBA3B0023FC94C67042D502123145EFD57FD2
BB5FDFC973AA1D579C43E41CCCEA36B5B993F05A8AE8676BD9EBC5658431587F
02C6C2BB0792412E66EA68D56DDF4C7B5174E7654814177D91149A6DC5768EB7
B130D9F33056E22DA0F25B12A99FD3CAE8246D1057EF35963C994DC133DFFDC9
8A2EFCA1A1171390433D91F411DB425675FACB9EBEB2129847D3F4099325655C
B3A4C15977BF52497D4C7D0D4938C1E51DBE2D3564106AE1ADEEEC3485278179
B323ED7A05E62D6FCC7E682534EA93A8C9BE7816C773A2431A4F16F7FDE22FE9
3AA3301D6039DC7293B9FDBF4065FC6CA6BD3DB618BF99E4BE25A598130F3079
C5EA4F8BF38378D9C491AB2D5F6F8AD8EAE6ADABB509E589829D0B625E9D62FE
88B56A8B23660C6CF773FE19786673EF992E550D107E9DEB4AF5D6EA516585CC
CF823F8F420E018AF5A6C8ADC2AC540460F5A7003E9C162FABDF13C4DCCB6B3F
89C0E23CFF0A67D965FA4D89C81E8B3C29B4D188F363F9E517FE53741948B2FF
350666CB7E6979E7FA1566E8B364D60D837FFE056094FFB1100B2EE3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.0: CMR17 003.002
%%Title: CMR17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR17 known{/CMR17 findfont dup/UniqueID known{dup
/UniqueID get 5000795 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR17 def
/FontBBox {-33 -250 945 749 }readonly def
/UniqueID 5000795 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR17.) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 19 /acute put
dup 49 /one put
dup 52 /four put
dup 58 /colon put
dup 65 /A put
dup 73 /I put
dup 76 /L put
dup 79 /O put
dup 80 /P put
dup 84 /T put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9D6295729076BD8E
CBC0F4C1BE246922D2482233846A96D867B66D9CF25A1DB661141D36B8506E61
A022F9EF8BC1F2F674EDF1533E67A78CA29A612AA9268E113C5EB84DA56CEDFC
D7A111403E6E2A8682DB04368889747E003A124395ECF0C7FC81218552EE7C6F
60BCFB4120893528670D0E8A4117EA5676915E3591AE5652D003EEF67818A41A
8882E102AEEEBECBD15DCF632ED246A6A58B6A7780DB6F1F9AE3FDAC8344585D
E104F2BA2DF06D68945889A2A3B6C262FB53FC670BC5EB7C56887FBFB7AA7026
84115872CFB0652C6BB330447AFF8F0F665EFD6A41D6DB6877B08052F402448F
CB21C26BDC900636C99CA347B79AA73AFCDE9762A992CA3DDF7279E5C50F453F
52098529850AFB1F501A442D6A02E0A2896F81C8AC735AF1E7EE47208B4CC944
649DF6802EEE813F1456205C6126D7D0B1821AB62DD65468F3A30575E491623E
0054E2E680E4402E1C8C538DA389B81603BE88D6DC287A076F92B224CD58A0AC
44B8D490197341808DEF243660971F444A560C747BC6F52707ED42A99736ECCF
EBCB694A561C3A70A319D204CD40D402FBF937A00BBCBE85DD26C9E3F91B7D10
D85B9D314BC3AAD5A58B107F5F341BE2C53490924142566417D6BE03BB4977FA
6635EA58DEB9508E40B9FFAC75FF44C683680CF242FE210519C9BF92483B0A54
83F48341318BE16D2F8C988FE3DB2E7914581F579D5E323148A31E4ED03BC24B
C990372DF5F3B0C5FA32EB2CA4FA0EA33316569133C87697BAA2292E685C26CC
F8CD40A2366E60B47D47CC9D0FA29D2836011376A07F78BA7664DE96E775CF45
9BC91559A063073A4C2FAAD0893C517C5C46A1425D07EDCC2B57162E3A45103E
FF26A2D2F98B194256A4B052AAFCC08965A50EECD7B9E8F35AFDF7B6568B3983
8030655E7C2BEC961A2F20539D617626E8454E3FE9EBD3EFCEF7F63498441DAE
16CB509BF239FBBE25EFEF07A3E16C9C71EB8D9DCB8403916FB40FD7F4E1A52F
72F2DFF94FD14D7D49FE775390C17C37C1BA0CAF35CF75D682B7833A83224158
D54CE962CFBAFB1B2CA50B60CBEB1F8F58DDB2F5470C355ED9632342D9382AE4
5D33BCA3A0A25EE9E5B39BE5370E7F20684C664EDB48E7973FEDAD9676F9EE8F
701CD4D8CC9B9EBC06E8C86EB88AD56E15CEBB8E1930E8F711CB6E01D5D14967
D7E6C1BDDDE2C4D00384EF4CB02877DECC27AD53FC981338977BA0CC0257CF7D
B42E9BC91AF45D9722461EC3CD9DEAA8011FB855FE14B74BE0A102008EACA2B6
0E287BB4F466FBFDD6E65A5262B9322F95E20DAB875A10A84572D982E6FC7ACA
23C0C37E5EB47B8E69C07507B53CDD98CD1B6445E1699CF35B3DA3E0DC56BB76
F997C40E2ECE47DBDDB707EB527055960113F2DABC87FD9EC7D0AB36B400CE33
0D54D4F197B2830B43DF0AA802DFB2BF747A4C44B31FB708B2C8BBE1955A6A28
379C91AA4CC065A50098AEC0B837E180B76801865A43C74859DF18FE1DA1483B
C17843BF1C7E1B11A8C6D8BB8CDB1D552FE6A1FD0A696A8F7405F2320F8621EA
17C1A32056C45A9ED35D2BD12D02D8B26489CAAEBF4EF33B66FF4BD9B46E4823
6395831A8F3366EEA0D0EA88D612DEBF63DA7FAA24DA979ACC1A52544BCAA007
6C39946BEA6076ACF45722B2B8E4D0823EA2D12B14A98367BB0433A21FBD9F94
18DF298C56F67ABC9DB1868D431A854DBEDF8E1F49E359A545C75A7AA1FA4D5A
50F1EE6B45FC68ABF65FFF257964E4E50D8B0C1FAF498DFC554073697C2F219D
4A68DA9E873B270B9C56F0DDBC9927ADAF9203FD684DE615F68C24ACFFB44690
89C0D5322049FA69E7FD00EFC9C9B2BD177B5B339907F81C31496662847BEC1E
56B5DCDF4FE618970F4268F475B2EF7E0F28CC986DDF098E59DDAD818649CC35
4080C0867A884B8177A6880F06F1E5CC130AB4243EF8DD8032FCF390765BAB1C
1F0C9728EEE261A09F8C1D7ABC7A6B1550551BE2A7D19D45B656650DB00B3A5E
B3E1186043E173BB4DD5EFFB379654F88146382AE3F7196F099BDCD6D245FB6B
AA2FA9B6CFBC9F0CD52798DDF2F13874BDE5B124DFFE0DD93E24C9DAEAE4C3BB
71A9A13AE2860F620B4EC789F95221015D9C510CB4AC775EF69DB9E32E59C896
1AF82C9F0DCDB4812A37761859A3D3BA0CA57F244489C78065346FFA78F5F7C8
0B2E8CBA9EE62FF5C27369D0BCD52857D40F1FB8F8A1441B83565A4150AB1945
0B54D6E49F66389E43096269EF5CDD39526A288C0CB81E324E75D326EC9A182F
2CD966368CE300B41873B08E17C3E6BB51804460D2562AF5A12339966F44CD09
114C6809AF246B5BA6937631842CB9417781A58944B6BA4FCF961465C208957C
81A662D560D0F81BD3CB53C06B6D979F04F6121CCFD5D52702CBF6C70C01EDBF
2040AAB9CB144321E68C4010E0E98CCA2603EB55DD62E881DB621C37EA4108D1
528ECC7A0121B57C6BB1E26F8AE7161ABA7E88256D2D6A8B7CDE2E730D137493
3FF628EF6030DD2330D747FABBA03B44CF600418C245C388F33EC5559E7313BC
4B530C4FC12530D38B27D6408548F25FC084DD0523B27D29D6518D3115AE7755
37162CFD4CF528214466FE525B13782F9C3CD78F3D6C7423E63A134C0A371F15
10F4ECE1D482C647B563D3D15586F80BD9DF7381BD53927825D5AEAF762E1CDC
3BD184F345029A95B3AD4D1B66E79AB4F0809418C0CFD4D503457A190D02F134
3F57FC04FF655AEEB783D6791E4EC300755861837D3D50649F6B7F60766211B3
8148F8E575E28D6C2DE75B15E722ABFC6DAADAE53D89FD295352781DCC2CFF6D
982F6DB778D6FCBF1B7BDCB53F3A23AE6EB499BBFA96E8BE04C3C8E5B660EF24
01EB842DAEBE979F2C2DB72AAB4D21627063B1D3C6CD40944E4CB81655698FBA
A343766CB22E392E5DAE01DB33A00918D6DAA07F2F38B336A3C5DF3708865E75
0DE04D3AFBCA27A249E97377D5785B4E28EE0E93F7D353619C200DB967372ED2
153BF8BE945474266EB2FD30F80042A11B7E3586DE4AB1FBD4A741D36DE583E9
1CA25DA345520AA60634EC819E7EB493CDB128BBADEC3890F055455F060A1100
D5A41D7B180027E08AD6EE7E393DB9F83799544404FE397F557773BE6A130541
157C0EB37E036C94825B5090EF85F8B4E3DB72895D86687758C20EDEBD6D1079
196E9949DC6ED0113571C70B150B37E446E319EC54D44CC0CF6A14760953DF4A
D0E1F33A54D240E236AB63B35BA8E071D77776BE5B9312245F2C6E4FDB4312A0
0D9CF723E7D9A3D8546C4739C00C301A89ABA60A02757AB1A0AC40B24CE6CF12
5850485B11E16646D7150795EABAEB08364A53161111F46A7BC3423A0D3BEB69
BF15726C1F8363914945DEEB29CB8766328318AF3B344FD6D77BBB92BD7FD161
93356493D4D8252AD125708D47C124E44232FB2BF7DD75F87889496DCDB75D03
F58A57D4122CFC194B75A9E9C4789C9A33C0435FB4ADA16AD4A6191928D1663D
05FB8152C0AA176FBA4755205F8A66713404787070757D3721ED6E6D55A59DF0
C92BA8F05EC7BE05D0A2E66DE85E75373483EA3BBEE0F0DFC7E2FA5FBAFAB118
058D095AA71FDFC8AF37E5A98406B64E58BF476C6926725D7EF3C2346CE3F662
1E5A4A18D966479A37070859014719456EA2C7F23E68E1AB2F25ED3A0C00A18C
DD403506923BC983F89CCA125780DC76A411472E38173BC0DD4CDA7B43E13419
B5AB0B9A35E77C58BBA12AA4F5C7EBF8A29996B059E4FAE6809565570442AEE5
D56CBF4407E1CD9A4398B1F3ADFF023F64B230E3D29F526B62D964F5C8DF801F
E94295AD85BD9E1C18E6327977260A871E921C0745CA06A263E335E344686E7D
D6FE3ADB4EE0A7E462F3C00873C3E95D183CCEC71C0E5DC1D2FB310B28FC3611
67C23DE336C374F72368F4973052B48E39969305791C986E6EE35D0350571860
3A8ED849712CF21AEF444BA390644E8646CCA16559BA4642A5800827A0DDC453
7CA0818BC47DF6348A5209A2F0A10CA39840CE6346E89CA0E842BE8692DEF25C
4623A5A0E0B98708B9492E9F564324BB3872D6B953CA59E9F393C477E2AB85EC
C557D333E88C111CF995FB79D9432DC94C2BDB3BFEE13C0D7D1BB920DAFA6158
8548447AFC65CD5515D5021E0ED7D213B0C08C35BB424AA91885CA023D7AF767
B83E619B15DFEF5588D2F0564296E14B5A6ACE03751E1016105C51BE76EA5ADB
4167BAED2A8899031FD7BA05C410ADA25ADD94A787EED1A7AE133B0568B1DBA5
44B41BE013782CFCA3D81E8E8210DD506ADFCE7DC7E792EFEF438221164A7D1B
5E7089F476240C5F94988F081943F24DBF7CC3D1E58CB89E1C0C1624682CC3D8
C95815ECC9183A4B3E353C7F920B7E64086E01672DAA7C8A81319BAA03C1FBB7
8E5E84CC5BAE0E107754794C755B7AF00953504094E1A9DF357D51B578259613
8D26F0BA26AAC459BBEEB90BCC98B865EDD26AA4DF533D6624EDAC762C446B6F
CF9F86DD2D8989D4655775E662B93BF51805EE3CBA0AE2293D95F166E80973CC
82C53042D0249C598B0821E9E7F218BA6114EEC86C158F277934F2651490B723
7F0D0288560DA5BEBAFDDF243048E590871AD18B3B220EC56549004DF122AA03
BAAD6971D790BC644369FDBEE74A324083CFA9496C2A333774F06E35299242BC
F4B26578907CC5AD1893613F2B8622CFBB7B55810162EEBFAAEAB2A6D69CB72B
D7859C73843E665125FF450631F32E64F13A6207F368103C7A7318DBAF2560D0
F1CDD83C3E48CB30C62AF1E0896E1962C655D9ED98E1BB38477C1C60ECDB6B95
067D3A638AD43EE886338F7AD2D2A574CE6FD2E21F6FCB4220EFEC85ABF8272A
82081CE70E4390A74EC717F1DDD168F4A4A080A79EE2ECE0F98A96871DA4B52F
78441601AF47763C2219F5A167604C32F478D498835EF3A6167936994F7C7139
3019FF43C97E7978D3CDA641C1E391FEA572D308E759F28DDE2B40B5BC207A4B
C5EB6A93EEE26782016F8B6534420BE4D790A2E1A65B6CDBE9468152230384FD
14E9AE84418A44F94E6825DD7D77D0BB5486DE26A692B3DA96C81FA4440C5D44
8E7F3CAA9B8DF38F87E09C4D78841F629F78F4E7CC8580CC44E59E5D9AE8B2DE
C0682F793AE7AEC12A8AE688636197E8A08FEB70EFDB6203681A60223B9B0D39
2DA656E5E99B82130D4BE38D7AFE18568DD30B0CC3C73C1E2914ACE11A65334D
A9F18135E7B86157122CD221C33C62012FFB16D2D2F3473A53BE3E7B9FD4303F
66ADF0B07155C7B9B002EA68C6AC7247EB3CE7D2670A60138049DAA964F86A05
22983EDA7242E6BEEB90DF61C937399B2CE1061DF1E551CEED4A80D86C2D4649
C9FF9A1F93E96773CD392478D5B70D5336A03A274E0A6EF44BE8CB2274324142
706BC2E340DC944339D647961FD7BF29944503B4AFCDC69A706AA6B0F6AB2CB5
D220A96ACC1EE5E7826F6F75F044224E5260D581AE761AD0C752A06AA03FD935
FAD65C9EDD4E5505396E331D45DE88F0D1A4303D766ABE0702C17E2A7F53C0EA
96A4DEC5A6B6186F5DBAAB05DD78E38AFE630465BEF0EC66ABA9C1C9232214A9
795D105C33CF069F6BE20B179F4CC9F484AB63ED25C1212C457DF62CA0D56E20
608572216F2D4C09010B03A8AA6D287C8F514BEEDC1C912552CC2489858BF4D3
084882CE4F4B6FB9EE27C0168671E6DA154018ABEAD013C88E1D3EC918371251
63D95BA0FE20212C20AD3F4DB614EE36B488A3F55D94C1EDFCA8E68E54A1EED4
7DD168DCCF07C3DDB5E2B499DB5635C5C5056A7438120DB4839427D07F96AB8E
F842E285243E40259F6DF029E27779CCF3D3BD7206B2C341045A5A4AABACC2A5
91C6830FE05ACDCFDE99046F16F2AC183426ACA4A89FE5F09B7EB2F811BB5FB5
AF073BDA2886070B2327D582DCBA66B47E8948C3BE05E837BE4B81402A583403
74FF9E938F0E9DC3B1CB81B93DFD4070F9EBAED40BA570DE8F9A5C2C0A097311
22A6065139A6580E332473E9410D9F4C734794F79E41D0D437CEC7381919DF6F
A24B170E2BC97A6396A4E3AC3D844AD6E2B8FCE1C6AE97DFC5319F49130C3D6F
AF2541EB2384D5D4CCBEB976846EF8C2165DBF706112BDDDEC9A57D157F5996D
95229FD5C71B885D16B177BAB06B9DF5740A45C2A005778EE879193290419C0A
A4A339029E37E685B8A05B111DDF94AC19B1D85C8E6026E57E3D3B373C08557A
F96E6FE3916695ADFC1F0BF5D558565F42A71C61ACFEFC9026424397F0646642
7EDAA05794BCCD164A645860B57EAD53CB6899B18C6E9496EA4DAB0A0C272639
DEBC4FCBA94B3BF123F7771F602E7667C8F56E12429669F2219C7D8E294BE07B
71E88EA62F5616CAAB7C0198E6FF12A348E36B306FE2684A401399431B6A84CF
B46EE4BAA0F4099E65E9AF3B70274EDD6B6524F4FA38C23F9CD5273EEDC8C6C3
E7312B6E0497C05AD3F3C246638F01387CC11DBCBD287ACF54D8E24759F51415
35ED64132EF4158F54AB9F4D567482B3057880490F805822F71E7E2C52F7BC38
8B1F803AC3731064B90E5E97AA3351D17E73DC2FE526CD6C91158636E395867D
C1150FD3BD12493FFFB813AF0D08C8ED0B7418A2CF90BD5B783364358605D075
5DEA95A9299C0654EFB28E2FE8A41358A0DD124D0314A27558E42ED5F2D74BB7
056DE04D2CF13B9B804A3CBBA29BC155A3F18B8B48283194C33CE8291677E1EF
0721138F8E0409D49BB99F217607586D2DF00C29A25536E21924B4CF6702CF85
C02DFBFD2AA4DE3DBED1D2C02E21052A8D10F96629D0D18154923638FE0C48BD
E2DEAF11663E20717EA77A5453686AAA39D6FF7919AF09B1AD956FDBF734F49E
262F3076F62E77BD45122B55A5913902D9F91C4246FC235BA9C0FA4A96994291
830638949BED423387DA2D455A3C9122484EFF27F5367D1D3DD27D207D973815
965E1CFF36F43C653ED406F65348671D9FFAF55BA3FC266D438AF473181B7801
164EA3F04FEC870743195B3F467DE36B3719BAD9BF15A18637A314C887D46673
445BA3C212749B0A33136FEE9FE2C9A13D62E7ACC96378D257FBE0EB06AD4D4E
D41976AB92AC720DFD33B0677062C32E6F5C992A0324FD26E984B5341A58C190
D20EC3F1144697D514D9157340A6C9F82E62AD8CFDEE59F6FF86C6250CE33D6B
BB82DDB4F65BEFC6F6D0E4044F7BF307CC346E2FFD191846E3CA288C6F91CB71
5FDE855FEC5E38816CC635C470BF15263A10A409F0BC4877F7E6D4C223E3564E
E7BB5B320AAA5AAF4F32528F7413BFB97C70FF5E6843E1FE501472129BC9758D
7531BE576C75840CBC4CD3E6D9E5FF52559B68DE6E7827128BB2ED1BAD43F36E
A0CB68C1A147A7093EB02062AC5492DB7EEE08B1BDB187E15339A66269E459BC
67495937B4317AF66A498923322B087ECF47B601C26E253D223A784DB2D204FD
0668BD403A73723848018B7C86B627B9AE0BD9038F567CD5F670CAFC5C4D86FC
ECA211B713ACF8C1370191161CBB6C2592E8B9DBF3471133F2D9A60F15D72F9C
5E5539D59A6A7E124D9A38A6FF6EB7C71990716F88E1888295584F17D49144B2
B5768B77E7B2B812E8C804239B23202AF0EAACB83E7A32BF32493421CE4EDA74
808C7F2D0818FA5CC7B9DE5158BC7A1B7A9C7B95BD29B01BC1DEB37D4EC57C01
38AE5277D067BF0242AD7D07C2EF591D6C3EE87A9D65A57C287DAAF60FDA68A2
1ADE7E7A457B95C7BC603CD8D9A6BD66548E5BB2167E415C21463C22C4459A92
374A9BF3C35E2A4FE2658D8835158A2BE0E39E2553001E83367987705ADB7596
D0E268828757AFC19E45C3C949A68D0C51B9508758F4EB2D3C223431379C61B5
036040B05ED02979AD1E8521F101524364A1F7CAFD8C47BE7AEC111FE399FC22
964665BC26EF6F88FA8F5B9A516ACA5FB0217CEF8518BFCBA0E1F363F0CF981E
526F1D803C9318A1A784629913009ED9AEE896BCB0C32014E9F4EB900062A9EE
8AE41F583A2DE4B46F8EB3B207344F9CA52989AD8A876F133878D5ADD253FE74
A224D2F07EB970C525B6BF8E81FB5B1150FC5006E25BA750372C86A036185BFC
21BF840FE1CCE706A0E23FA25DD02421950F5657E97AE07A1528D60051AA72AB
C6396607E9D5885A1D5F1E333B2B2AACF4272A05A41AEA04B2C18A82B1C66A40
753A3C4BA93E9B2019D0DB7A25F0110F6DFAA2CD3AFF02F5E953244E792F53ED
2E01FF4C3FF4404AB0D57B1F32939BA71A2A55DC186A31700E8575200F70D3AE
DA018464D8393CA63EAF62014E6CC7DB5F9CCEC73E949092494B80149079C5FD
3C8647D337A1765B2C89E29D8EFF384452EAC8BC85CA3E9459CF0DEF0F0B6B68
518B272C4AF9773D5F9A60EC7B1C8357BFC581A133A36EE176FB389277912776
0498F9B1A9413396F3463A848B102D7FAB3ACB71236CDED6278535A605DC4A17
1582B33F1A55949B0C051B2EBBD64DEF3DBCB4EA959AB213CF869038E28932ED
F9708E4B8C2B463695831F517C6B4BD4FC6BF064AB1CB2CEE8267BD6EECB8B4D
6E85E8EB370FCE35882C84E671473AEC0845DFB4B65D212472ABCC3B4E2AAEC6
CF282955B9F99D08B3B289263653656AA64E9D3B2C0DB41AAC64ABE4DC2F360C
E561DA83F4B8E1F6AEA143771AAC1C8875EB8E555EA4B0B66EF5E198BCDA38C7
22607B5DBCF4762515C8C5B0C5F7F5E05ABDE158974FC5D477ACB319B9C6F0B8
E9E8CEB517B38E4BE8426C1F629484C79C589D36A6237EF59C87BE82E4EDD3FB
2C7C25291CFF77329480D7DD11E7CE1C4E2D9B094C87A3A666E187BC24E9F154
34F1E5F414301F265E1E08CD1BBCB693F1DF9F782BA5F4A7099844282972DDAB
BB58AD51D35ED34EC8F99532110636A44CFE754284242855A2B731C6CD0F53FB
2B772A6A011831DA65C52AEC0FC3A03ABA716DA9508B4E6AB93DBBBD6D3527F7
D8525EC0368C17083193E13C328AFE8A7C09E50A1228AF62A47042260230C961
7739131E75F00B92A800E965E9B493DFA2D76D5EDA360DB37FF8695F948CC464
CA9A2B16BE8015F6F003F82AF3013C5E829ADE7B6E4215637C9F7D7990C87F21
B997DAD4BDA6BD9493B0628A475B8763EE89BFCCACCA1F9982844FDF9AD08852
F9288F0D3FA6C12C910FEAAB04DC79D364D0D681A5CFE3F56DDC27195344952F
BF9C2E76E9B77B6CEFCDD954F4E05DC5EE763636F42B23A285A4EDD6A163566B
2ED786B67EDD2A34CF6B94D275C4123D4BFF0C811845F3EF056547660BDEE803
FA86CD93FB7E77C436AC36C9254F7245393417A012BEC0C28C0BAB550CD30801
7FFD0BEC4454F541433A70A48280DFB37F4F090C6E358A6FC24EA95237862DDE
3603C93BAAE058BEBE0FB6EACEB389250048FA5185D3BA7EBBA71BDEC1136756
1D29F30789863C680044A6006E24862AFE12823D4926D6229CFFBE53A429D327
60A2D82BB9D6844D728B1CF353F0A0785D74AB2748A31314F3877D1E260D96F9
4CBC3E9111102D1482D40A7CEE3AFAE3AC769F9A24C369D1CD7525C7F59C1C17
DD8E62A19A46A6EF1961F438A451D446DCD1BFC7E2876FDB36916216B316424F
E09B8A75CE8736F02A85454002AE6384A10B90F071C977C1CD713BA471EF2410
28EF5CB50474A6245E2CAFC1020ECED36527E2EF35A985048EA41841AC5A8F70
29254C5718E81351B1D86F85C68C3721586936FE47BCA5750386F937080B2AB2
E0771E4811C128BA6E73D9F9081B0A9C70970CA95373FE473762495C4A8E8AB9
704632F7130D941B0C95519336176E7AB00C7B6150CBBEDF8A785AF94F9D54D3
BA466D3F9B244B661436A62619A86C6632F19B8DF1B3254799F61FE08A3D700C
AA4751985CA73C24273D5194E766523B65C7389BA82C64A5AEC58746921A81DA
7155B1C48616BED1DDA4836E4CA039DAE7771DAB743249964228D2DBF154EA76
3207C6A16827F86B23621BF8A19DBE93FEBBE0657605008523E5DA146CB23796
E583B1975314D3B5B3F59802438CC78FC20D6F3DB3EAE0CD0733DC09B175CB0F
5EA494E2B509ACF96E77F0ADC2C32DD71141E119B8F47214538214624F4EE89E
B8141D4E5C826A44BAE7DE8D7E9D07A65F3423B17998C7F45D53B619BF55ACC0
F882DBCA4502BB2E5EA4BDE82E4B3584DDBD03B3FDC1F0F4774A72151B8CB58B
51D32024FA22B22F8347EFABE6B224915815E07C910E819DCF22E23328E393C8
0A7509E0613C9E2BB5BAF4764FF8064707B6E54B12BB663C517996DA05D51AC8
2CF3F5B31723E198E67839E9A32A8B9F6AEB0F6504EEEFE36A65A4028A82CFE7
5002E6B8B9CBAEFE2195CE0915E3A07CE8BC70345C46416AA089EB90CAD98A14
71A3E5A6B9EACCBF5349B75CE1BE419A068B423DC2E0B8626F0BBE5140AB131E
39CF2D2F2C2185FF2371D21761E24AD7BAF6CF2C8FA589330B42BA5D87DECBE5
07BDA5012495BA111DE6A868FA447633AE3918A8F5ADE5E86AC5120D15D855AD
7C2CBFCC03F77594CFE9CF06200A8AD18F7ADEA2403B37E94A331634037CC452
8A654282AA010F1675C6F5851162F2860C9B62CFDD11F792E88568BEBB5EBB78
8FBC247FDBF37A38F3A9129FDD04F9A033F919510BE3C0F154806AE39DF91F6F
2F445360BEA0111D1B6B2A89745D2D06633257A6591F11946CF103C3780B3C0E
E41C3A7B76D8E1FB7FD7F1F07D7882980E19DF193247B013A44637DF18713275
79948375454649264DF04972041DAB1A53F193D8DD2741A2B0EB6CE6F32F1842
A8844DE11C25DA182193E41A444927CE3FDB2F666ED9D28EACF37D9872B22CD1
9A12FFC5A8F9D5543141AC2E51A80DDB00C4A5451D34E2D343C7EA9ECBAB6D8B
8CA6B8018C57E6CF47262A9F11E681F39EBC06B4C4A0E6172F63C03491312C58
3A5443FB75CBBA6172D01D59717B3B3577154D7F5EE81A5414AB55FC4B697236
39DE16B152E7F34C0C0685814F7681448E29FFFC394F5C75983405286EA41823
C40B55BC3204A6119AC0F12622E9B965D58F5A66A3AC0FD4D0887844C6AED2AA
F7FBC305B8691C0CA6AA4E3F730E789954B2EFC53A8FB27DD7ED35C4F5FB7415
FEDC9D8F1433D5FAF7ABD82CD4610BA37F49FC4E95FC4B9F520C24E6B7B4AC9D
135FB6374425D8AFCA4A7A18605D757EEEDA047637703276666F8E075BAE6B22
6E93EF0609A322B8FBBF3B316726EEED07FF29C66DF49879AAE774D2CA8EA707
304B3148602416910A64E303A984A0BADD120250D4967400026D582D34FBDDD9
454665B65C67618A29279CA419340A9BC82373A5ADF648A7CE625305B17802F1
E8DE3FD01BB35C1CBF225DA651B924D131363A020C850C046ABAC569A044C14E
1E19DB9C1872D93F6BFF44F1CA31C82B252356453BDED57758B694A1714AA1F7
31F246DEFF9D9564FD7E40ABED46FAB66271B275E1ABD3F81DE6FD7AA2A70C87
D2C885BD03822531D57525EACDCBB60804ECF5E5D630431E6F9ACE588AE3E4F1
3B355674BDD08BD844396D4B8859A0EC8BB8ABDF4193DCE1AB879CA7DE46E110
D90186BED22A7CD95897ACFDA0373C78B434C27EEE752B0FC5CC5BAC2FE54DAB
8BC9128D2F9F1263BC4B4392D5250EE7EC7F5D75132226F3E2299D48757FC2E1
0341CF302CDB7BD02679F4F8CF259D4902D7928EB5960238192F0BA27B44662C
66418FC76B673EC9A1AD8456763045201D7CA665AD349A4BD67B68794D34BE95
AE8D76C557D28FE61E60A2AA94D29CD6A0EDF334E17ADABC4F1091594BD50CF8
70C3D7E5E228A8E87366AAF9C70A4C24A56C5C6DC6BAC9B475FF373DCE76E98A
3FBCCF064823B042E956CA37951E13F1CB6D0C26090826BFEA63056B2DCE46C5
D38230491194DF4DA0312191C8C21E3C643B5C9A2891C72E3A4072F99C5F83B3
1361B9033B0531B7967FDDEE1439783A12337F54516631E3F469931D1C8624C3
D0964D48CA2FD11C03DD71CBCFE2FD8A5BC620E19CE1359171DADDE1F57D7483
0C645CC0375987ADF29419C473C414D2E45CE5258FA9693C7273E22D07BA9D0D
5E2A81CBC14D5864D9078247B2095715A05C3949E564ABBB3C5631CDF7D8A3EC
C333CD0AD57F67C3AE2DDFA23C39A44289BFE2575672E1960B87DCF7E6B2D89D
94141AE9E85BBBF2267F893F19878B2377A03087B1FA72FA41C92BC07F29EEC3
31C509D021B99957909149E76BB4B1567DEB2C057F064CBBEB9175970B79DCB7
79E5C52675C4F6F336430C979C436B1D199B95E5667325F432CAC5CB0F80B330
C09E393292544840D3A72087E1A58BBE8582668CEB0D3F8DC42CC81B79A86C9D
77B9F70F5B42759E2B18517E622A4C3034473FCABC5694D2B7498661943793E3
78D6F4455920CF99FAB14B57F47562E248DE4F0759C9485561B36BF6E7523E62
88AD1893DCB5F6EE600AC02B4BF7C97E6475E540E22E2C1E06A267C82409CEF7
3B82AB825F2B347242244956C942770D1866513035276D8B05D3382C601452AF
954314CFECB3342A1480FFB1732714B8E3B6B8D0C70B78FCAC70170C24C04B5E
3CDC69CAC1CA0389C0A32E590D04F19DF6632131B74AE9941A3E9E5923F49926
B45200693D9EFD2EA009388EB43FB98449F956C47E2C4C4B9E90D477E0020124
EC0703AC9A870DB6C65D339467588EEE9FA6BFAAD3D6B1E77EBC77DC4B1D4A62
05551878AFFCEC552050EF80DA0CE01A2087717B25C447E3F5D7AF4D93BA2B4C
85A5E334B5B91500FC231E8CC5D5E62F3B5893E49E1CA7B77570791BB1A0F1D6
18AD0C9236AD16315C8BA5E3A67D22FB028E2FDE9B2130C28B1BFCDEB7135615
FF6CC6F3D5F82E4D3D73FAD943D2C608E1789DF9F175864E5DBF8BD0F7B5DCAF
654DDA7044E0146ACC8688E7B7858297CD6757A336AE5DA5D6E938BDAC8D9BCB
1D13D1AD6B73638D07D088B35F1348B8EE7050705AC12E2B8EBE48D0288F0646
4917DA5CF3CCBD1552A148A825FFD077B11F3035B7C81E5530397DD6E58C61D7
8C891DE6B72D54B484DFD0AC203D2CB250F1B584B4A8CC1FC5305D2875ADC05A
99E4C39A6F45CB75EF895A446EE5846F6ED9EE075A259FEC912B718A70D5059B
0D0BA52EA550DD82B7F665BD15A8C4BD81C42D3748745372864C6E36B456B924
85E627F43FF6828941384E3FE7E3E5EEE79C2F812456C6A88144B66D58422FAF
BA51C99D409446B0C2C2F3FB31203B55FC8353EC4DF96A874C7BEA6339C8BB8D
B4968CB36FCF33F524C069F68F7F12777903BAB2645157FA7CCFA7348F69C05A
214F10F2405AC5D65E8CB6924671818CAC450B3658DAE3DB19BF01DC15C57F37
A110B922C95D9D8D1ED0F56D09800F0882A07B770722AB4C354F13C263131B7E
30EDE6D98200C91C6711E16CACB6AB103CFEEF8B8A90504F7CD9B8B6B0F07319
80E19D3AD3B3E9DE871B32A2106F733DBE7D932D82AD5D3361E002F8A9D91FA8
766D451395CD7E3B2CC96828AF2C18D3E12EC80E5D99165803B06D3FFCC8C2A8
204B2E34FB46871182088680292E97BE26B58106CBD953FB0A55942E7676189F
3207FD52A26937C718657920DABA287FDF58B7DD794CE1605F9FD6760168DBC2
D14B783C36CACE62E20C0FEFEC3F1130CC07D43D53EEE03845E2DDA4DBED360A
40679CE13EA704AB351872B37122D4F26D6644CA46C8AD3FFCA0F0584B3D7E31
9158594750B434E741342125761E65329C35D692205B393AA4C2DAF2481257B7
48C5CE52E90F9ED7CB68AB267780504A4A35E6CE6077BC49C353541E7D2E6534
44AF6703474219118674D818EF8756A71D6A5F2B1F24B8381086E77A08E5C04E
C55AD510B82FDA0D3900CDDD6F5AEDB0640BC5E62115B9F88E0E505AF2752AB6
8821EA53752F341EB9FE854E3EF971026A00B3203ED47D7BAAF37D89ADAB2E2B
92802BEE19791851C83B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMTI10
%!PS-AdobeFont-1.0: CMTI10 003.002
%%Title: CMTI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI10 known{/CMTI10 findfont dup/UniqueID known{dup
/UniqueID get 5000828 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI10 def
/FontBBox {-35 -250 1124 750 }readonly def
/UniqueID 5000828 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI10.) readonly def
/FullName (CMTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 51 /three put
dup 84 /T put
dup 97 /a put
dup 101 /e put
dup 114 /r put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C5FD29DA32D34C95E
2AB2ADB3F60EEB0600C8ADE15A2380DE10AC5AAD585FBD13097B1A7E8E210D4A
EE96785449E07F0C8EBC2EC5EFBFD0897DFDC15E5BFAC9584D8DE95C5AB288CD
8AD8B9BEF0B8E5F887B3B0B331542FC8184DCCB753DB6ACEEF98B85756B988DF
CAF1AE0DBE7D37D5F44A2E760AAE3A5197C27B15E32275A64946C3E4D0476FD2
7FDE148C788DD2106F7C825E270588AC05B57E625AB17BDD02306F9E5FC851DC
32A5A6EDC43C770A71419B2C0C8074EF3F222C8A2097CD81A91F333A521B3A09
482A4FE1CB231CE344AD126AA284C3280AAC3AD162CF0EE241BFB4C8F20502FF
118507F5D1B5FD898571015E73E5CF2281085072E00D401F6F59761EEC3E8381
1F26F75DB66C504AB6BABA87D121B1E7040A07AA2FE01F80DBC246CC03C4B2DC
C2A715980C52B7F96BC1A78FCC7F4F52EEED5F705E08FC1E5BBFCAD121FA88AA
8EBE58172C162AF409DBB0728F14923ED02A65EA24E5D52B6AD07777455A70A4
61833D3789C719BA92E901232599767E423D5AD9C807670BE0E7B5CFF8256A20
C7BF7214FFE0342809570F5966A2C43E784F35015D9040BA34FEAB6A6F089504
3A40A9E9D711A2721D3F4998371430FB3C94BFC619559B97D49627BB630F4B70
9D0A8FE4E916235335C3962F3CFDB04C4A3CF714DB5E260F4E66FFF2F27CEF2A
D4AA26BBCAED23B8BDC98F8F453BA27AD7758537561E766B82DC3032E92A9EB0
125D98A22C5466AF069BF72A9BFA052A8628FEC6A6AD0B711DFFEDE3AA2D7CE8
34EA487038EF50F953B8B4471CBA6FC3C53877EC1BC94582B1123EDF44B4056A
30F49394BDE22CDAD7F01951C7013D26979277D18EFA594E8F4F2B5E615187D9
39E842EC28461B9ABA52020A127D2CB9002A673A435B13C10602EEFDBBA6BD49
9DDEAB9E68D655443A5C2492BA061C1391A51592BA8C353A6F6A0708E8860184
2B5D031D2CAB87D618E9F6F7A0BF3F66B3FD5A25BB91F7F1F5F99CFF56EFF4FF
0A35C55658001ED2E97B26C869292F6274D433A5443179DBB8EE987196306348
3F9E87C6422AFFDD30080C9AC4EE7FE5E2DCBFEE4974331F4AAE479FD8806D4D
9C2B85FC69EB0453AD827A1E767E5C484BDFBF5C8D6E2B3C96298B390F22D757
802643A79D5E29CF3AEDF0E12CFBECA4663444FC87F2027571DBA9ECF688BF28
FF0DDB3AEDBA0FB28447CB4B5D5205F40C1E7A525FD7373392EEFFD910AC82D0
98E71660A1B3227C4A2592F3E853CA4CDF64DF19A52582E167234F4036FAAAB9
5446BE102DE2BF43E82F0112C2A20F15A3F92C6571AC761665A905362C4F8BDF
AC8705519C99862CD9C0D75113C4AB5FBB83C880E46B82715B5628890D9103AD
A2329638B95D93C4DECDC5E6C588C9D5183EE6FC28FAF9825F02DCA567306D93
5440987A81B51EE7291107A08F201C609FEF91A8F0587E8B13D4BAF74A5A6815
DE9E4441F46AF8E1DDDFA2D611C889614040B144A5EC064DEE4638C04EAB2E37
4CA8F50FB8C4D65BB296DCCCD39F1F554CFBED96670A91F515CA10EF896874BC
8EF48C6447752C70FF5A06F928DB55586354076773BFF7E94C4C3A7A1C1F421B
A9B4E3936EC26E0C19BBBFC90F021E877F54B62108F6DD1C7F6D5B8E64FC9362
E173F01BF2904B7E5A08B3543611562C2714099DE7D4FA330DB148B560A9601F
42A84452811CE213DCE782A0D7809CFD954D6BC1EBF2BA4D1B18F50FA8174C96
3E0120E266AD5DDB40B3F6798AC28CDC5C3C4BC34583528F5B5DC8A222B80B59
A3A93DC715D061EC6915E6E6E21A25425C25E8747C60F170D61047108826F96F
7830E220C108B441B6EA3198E33C49BAD8D43086E49F5A2BC7958A1A8CD011C4
49045193394696EC3DDD0BE084E8F2E9F0B9496F035C0DEC1CE11409DF566428
D50043CFF5CDD1092F6E0807E660B68163BCA738E8D98FC6EE3F713164CD204C
0BA84FFF4F33F47BC31750B448603D7ADB9AE92FA91AEBBBEC0DCD66980E6955
CEB425ED07115B24E40F53B29B9D840842EAC691B4F591F866DF27556474B485
1C6F53DD72499847109B16C7093984A6B8487D4F3870DD517945CD90E648C1BB
8A6861E540FCF9D75B984B5009B5CC760CBE297042C240DD624111670B703388
6FE6FC0E89C6B4C88F51DFF3913D0CC1FB4770C8CBEADD4B86393605C0B6C468
83CA5594754411B6FC331EF56D7CD6D247FAE42E966583C29239A8F862348D29
60B177984B6B957E733DB4D275015691D91443BBB13C2DA96097A29733CDB284
42F89C85A7A743338C9DD3BBC4EE53F695E5163E6E1ABE5791ABF100B198B9B2
1C21E2FA2FB4AFE7F9BB2D381260CDD3A2CC05BF513AA1E80ED69FA27BC5ED5A
21445BF00BC2F997B356D94AF13736C6D3B0613EB6F4CD96A685FEB672661DCA
206105EDC3CA07900676EB2FAB37F48D2E8207BDE1463894DA3C5B1488AC1EE9
D39DAF691648048F5D7A384B8927F8DA2BE3602669F71D80686E427F395134E7
7ADCC611BA91AD4B7A0237213C60CF2C905359C90795230344FC3C50A22BD44B
55B2044792509F50F5C21F53D9F9E9F063ADBED3AB99E2613B23334FE8DF70B4
6120F2EDF69F50BE793EE145B9FF9C73179DE640FC2ACEB5C6617F918CEEB762
4CD81E665B2E544864D13230B058717B207D3CC5D6647D5343DB4D0356082392
871EFFA896631A7E0D6477942B632074A9A4EF7B09D4701B1639BAAB4E03A40E
9B54A7A4F845CD63F88831EBFA4FB847847CB98F3455CB5957F2E0A0F5623645
DBB5C5564C7F8B117D6E27E65C0F3EA81AE67B4AE4B201E7C4FB0A8364FE53F5
41A7CE8F834C2C4B322809B353A5E63BBA7BF3B7DC1A85EA700BD287C2BD3FC8
2832B0BB4695FC937FF5EF06FCD87DCE6DE793C2B1EE10E6450352C17726155F
220D550B1759E15AB2C1D5968E52C8080CD280E99D3CCC0E80C2EF8BBFD96001
A226FEED7311EFB4B67F424B557A877379A15BCA54780F0CD2CCA00400B9B39D
981C6B552AFD2506D1B23618FA9AE6D8143CD7198A8482CB416CCE62B992347F
337D505A4078713BBD91E5535BD58EF0351EBDCD749CC24D4AD39F8CECD7D6C8
139756680A4C03A58B3374CEC658D30160AE4863A3938A891BB59CBE02BB451B
1BA4B2B6E68AB61DEB85F95E3C909B8B66E220B9F18280161C279F10F7093CDC
100A53D542F071CC0A5AF834DC1D18738F5DD62A5573E884E1FFD22BD810828A
1EA47F8218C15A2E97CBC609927DA3CC2B802EA4A0D7EB57627C135E3B065905
F97597D818A2C5CC6F328AD25AD11FA50F1E4FE637980B7474D6F85A521892FB
72989AABEBE02A2D0EFE88A6F67AC29F5D8DDFEDAAF465C439983C6B84389FF7
A6434462BEB7B07DBE4BBA61ACD4A60C55B5C0AAE527DE381DFECA2E6BAFDC8D
310364ECB42CAFF72BA93C067B2F02D1CA7C34AE7CDC46787A0E234C8BE8A928
7A6F3DDE0338FAD532A9886E8E3525B85DD39364AB03EC4C0DD25DC179CC1989
1BE232E387E857C78332D834679195E10F1E7B87B7966DA3B2238F53D1E13FE2
8F55ED6A92A750C7250C9B91E29796621E7E9520373214D7DA81B2875A986D33
80382AFF6DE1F829F048E57664D9C4ACE91E4684A51023943A4964AB5657D610
3A5405EFD4CFD1EBA684243E15093C9667797BB47617B66054EE02C41FFEC45C
C1BAE8AD56B00D323FCB1D2744F061FA16E161988741A319B1564E04BA210996
4F9F02A3268CABE450D166A763F5284954564A1C86B76544C5F5ACDFE0D758DB
865A1CFCF9FE8CD5F9C3B2998C56468FD52DF8EE60C6935A3D221EAEC7714E3B
301371C7DDA0B03A2416238F2B47BAD3A2C5021C886DF51C695AF9C87A864B48
3BB3FE0B355EED5454B59B25A0D8A1B8CBD356C24F64D9B55E16C30C011365C9
1E0380753BA3EDC0868788D5F50B9353D0227BCEE1BE36998B2622C0759BD66B
E4444250589F9CEDE766D8B940770CB6B89503E925B35C00CBEC2873D2DC4A29
0823FB7A3717B69A7DEDBAAECC067949932728E89BEECAA91DE3AF9BF070B9C0
30EEFA8C0A55C8388CAA2F0515915C98E67FA095BB98967D14B0DCAFA9622E4E
2E0EBFC768D80585ACDF28D8A5C2B6EE2FE7AAF62FFB90F569F84A0903996DF0
C1D5723366C436E4088F3E2BB9B47F9789052A71CF5C49908CDC1DDA194BFB89
14D7E3D7D4D72A150FD6FFD8303E9DE5A97A71B808B8BDF2AE466F31BF5D7A4A
44F81230BBE2B456A221E2F72A8B59F8FEA8D31F8A005A5BD93B9F49CFDC3DCC
CE2B67090460F632271C7157BDC2F05BC2749FD562FC28682A616A52D1B67654
DF78B7843A9EC26A7DE2EB168F874904C2915B97534B2D4D9F74A9573A771D34
9F7BC855E8F794621BF6AD471BCC347E2DF5F620F5C209E33A4CBF1EA85AEA87
4492A77342DD33EF615FF34037D660B713C908786D9022051B825226545827A3
2AD1B05D654DB6E6D261B4E8AF0933AD1F0FCFC7201E1A7C1B4199F160C38676
21ABA2DDF1CEB655B3EC3226E0B122976EEA998F7A5241F062E54AD1DFD6ED26
47C99A439E0AE95415059179867CDD3F0FF751F3141309F40E00A6C7C28433E4
F649BCD5DAA64177580E05C495EE7BCBCC5FBF104DAF360CC2711386655B26F9
D349D887EEB32ADE595241560FD5924A1745A22E6A01DB9C285EF14596EBFF0F
03F36EB2E0A7C3864F819EF7B0855121292D49482F046A55CD7271FE03F02EA5
886864D9D8EC22A68C23089EAEFFF03DED6484D8C341861EF8B6FD3C5BDF5AC8
352DA4E13A1E30D0CB71E090E9CFB9AB2CAFD0CA7C34AE7D8E3B2EB4666834BD
9CCD1AC2108348AFEF6071796F4BB2FFA4A67ED917E76A109FA2DC2A30D744A0
9AE653A748C1D18FB52595D84E87F1C1FB6B2F32667FE203262C66627AEFFED3
92B23861E5EB238BB4EDCE09DAE1C65BAFC198CDD1B45D42CDF93E16BB82D35F
821E9E49067E966AFAB2AB52928F8DD6359984071FC37AA652FB834A09E5BD93
3AFAE161140E74C6531E413E8FBBFC42BFE8A464B71EB1D8CAA93B33D7BCC3B0
47C7EEFCD3E9FCF26FF9441DD9BDE68D77AD7251C06BBB9A2103049E8827CAF0
F26BEF33F656A690235DEEC623CC519AFA82DE2AE16FB99F780FD7D8290DA40B
9B604AEF36B529FD184239E7D50561A07428D28E51B55546590A1AEAD4B7F2B1
AB8C5B9022C1FA03E33F8F409B24911AB8BFCF6EF4A8E415263C789F89063E71
C0910DC20347469380B7FC1EEB87D4CED7F4A361E58B61C91AFCABA35C03F978
B9FB5257C31657EE48504C355CE893FE3C553274C641DBC4004F5D5B879CC5ED
D3F21F867F6DF054127067DE86189F0B59A1B90FDABCDFEE61423609D888EEFD
F4A1367129962110C651D9481CEDDB8C5C2576A59AED64E95F7ED042AEAE2F7E
81AC0C408E593DC30DCAC334EDE9EE27D932B98F040DDCD195D6155607DD2038
970EB78221A94C52BD4F0EAC65F1FC10E5DAA93C17266F351669CAE56F42B68C
6D01E1EA03AE554D63CE76D800FDD9CFD89F80A241EAEFF7EDFA41794EA25CE7
97BD5028464D2CD45B53834B4AEF8BF0B9E7C6ECDEACEC887E8790A47A93F668
A9095E5FA1116A122C0E5B74E2226C654D3187C6CFD8807917820423DA3EC1DE
AA020EEEF2280C44A15209EE2F3FC1776875308CEAD38571E7BF889F287E4594
971A83605E0B4169D4A23EE790515223DF8724054EDAD905F57918FC0BC64F96
514B4BF7DC9BA79E763C22C977FB6146B10D26FEA1BAA7BAF21312F78D1625A7
8E242D743471DB5821408AB786E4A7EA9D35E30E85533C617689F95758FB2C7C
392E759C299DCCE36689686DE0C4DCE32649493650BA194A6208C5EAB670B170
3F2C70BF0EF0E3BE2FB0A79224FF4ECECD6BB3388C6D06867A0E5E3DB93C1B2F
464C23E44D3132E7D4086E3B59B1D13F49EB4772DEDF8EDC4F603217233FB7BE
C13C28648E9AA51D53F11FB896839F97AEDD8834BCA53CB0021AE91FD8E95E2E
F8A094093AF556B9639F508A401542B06821FF9DE1A745FE9AC5CACD5E8E1053
911442FC15CA5333751ABFE2C617D38FA1DC332BFEF44AE569DC631C93EC54D6
261583A695F5A392867A57F59B741EFCD2DCFECBC55D1EA5F2317601C9DFE9ED
D1EA466210FFA905A8F85BD58B98991BEA58DFD1CDED5C9B086D42CCE632DADA
147941917B879139E016B0DDEB8446BA017FC8EE5A354533D667B0835F5D027D
C2D580C16B80B3D05CC92C0465CAE077729F0A15B2DAFC89DCD349B3F81D0516
C65526EB5C10E45A8A85D716EE35FB9AB201FD7C89ADE5AD925A174169DA20FB
61E96C73A143DF964C20589EF24A0FCFE6195317F2FA0D2249C0D8E649C3D9AD
FF13332EA2E4C9CD36D8443EC8F027B61CEF92C6A6B72DD4ACBACC16E429A9A3
F5F29C1631360E32F8C1C93ACB22F810B86D2969A7480F486F62F8488BEEC74C
2C1AF13BB92BC578E8CD30BEA6BC8CB68ED730F54CED0167605FA76AD7B7E88C
7AE7688E598F91C471BD65A542E96D64B1EAF19FB4F1234308C48C2DC86E2193
11ABDB4C6189C6F201627C693691A86DD07FF55C30FDB3F72381E09C6080FD7C
9182762E5001E30F52A216E0B71E4D2D4E2F3B20F95DF3A11FDB2D2B5B5FAA66
C46226D5E0C77066349770514E5675550FAC9394FB27CD2C2F974F1FD58C04A3
1EF53A8AB3B2202CCA1CEFA66228E1480A0709436C44BD3319C40CF888AE4692
5DBBB52B15CF3A518F627F672135A24D5DB9B2EBEF04C860AECF231EBB5A3BF5
6DCCD5E72FE4B6DD29E896691868A7DE4120AD06AC573F5608B8449B38E71CA0
EB5CDA3F942482EA7973661170F81DC88D54DD5B92323F46F833DFA757107E9E
F62A47CC50FAA1B68ED535C3E0E1073532A05ED339C8D70B3B9864808ABACD23
AA95E9FDA43D54C66A675FA074E0A5B8777D3C07850A09087F36852B5351F35D
8BC4DDFCA35CF29CD5E3DE118A741FAC4DED36847F2E2C6CFE08669301722D94
376F540982958074E7F1383C409652F6C99DA39FE90B38221E75BC1ECB93ABF6
B00F410A0C5651DB418566AB350FDA1789AFD88286AF3BCB42B98386F7BC144B
02DEB8940D20A6B3062F0C4244EABC50923390064F1D027A8BACC3DE45156E56
4A942D1B87F1C4A76B0D4D6801AE792CCAE3009BF25368B31B6AD5476FBD3BFF
9759EF463EF5E78E10B7BF64005B2ABE0E8813950A08A1808587A98E0021D0DD
751AD515E8278F1A0759E85D8A084490BBB0F8206484AA36388B1013643D3198
3509078847BDAE08E76FA5BF3E3A73C323CE093DCC148E3C02C2DE1E26C94D5A
40EC8308ECB02FF7DD04EC1005A2A0DC74D4E587F10A3EF349E828F69FD38962
2F0C74D5DAB3ED6CC9F97008ACCE74C086A503948DEF1AAF58FC8BEC703CD360
D32098A56AC776B1BD08442052A2A4EF6C8798F7CDC102AF1A2009657254762A
0793F79A39DCD6ADBAA5EC84A7ED6018BBE727E5D477893D84F157074B24C13E
8D4881C7DF8ADC13EBA0D89745EF93B7616EC5355600BB0D2B630AABA3CF2946
AFFD0B2B724EF0F28393F4FE25E8DCC5832AD77B4516E2531E00FD1710119FDD
B6C70904591CB5263AED6095A96B509D24027446B0481EE02680CA5C31C59381
BB2359CE8DE4CBE5B6409D4903CF37E2CD6D813DDFFF35ABD9AED47339CA2001
5326BBB45A5A151A329AB20B8A48A155EBD50A5DC1919F4F11B8EEC07E57B5D6
98353161B2D1280DBAB7E40A85051E79939718243DB1F50F2802135F1BD4EDF9
C332B35169B5E03A6D5C36883E95575A8B730A57721EE9D678A759A85F77BAFF
8D46AC997C8ED678DBBECEC95B1E3EB16DD6D25801A9A1822013C4B64C9BFD51
0200C2E03FA05EC6213212E127B968C9D09176613CDBBF70DD3497A59CD2F278
16A9E869703F94EAC7041BB08566DC1E95448ED2EDD5640F536A5888CD81D75B
60865AF75C1BBB8EDF5FEBD36C6E600300261D453EF3794BEF61C658D53D1A83
C0538DF2F8252B6B963B85BB230DFA655EA6AC56160496E102C4FA87EE82799C
F60EF3466C90C26944439B59CDD0C32A0411F64D4486413808BAFA1BA43F4592
A98C8D2FFF3F7C0A84FB8D0F4A789DDB7197A9152E517EF0F65FC96F998CBF98
917D87F7CD75E5038E74DD522232F5546377C9A9BE0E1BD49625E46C51D541D2
3F9D2633D0ADDAF128E4E336E7A4920CD30285E1AB7983940A58AF4444718A35
73E939A79DA117BE5648B03E79CB24C30B17AB03262A06F62E89E0F168D4D129
50FA0B17EBE7E676C5E99F0522E052D215865DE535A61C2DE2AD7AF729DEC052
B1314AE5CC71BA9B8CEA1FEBE62D888E525888557F6A458B1FFD3230CB86CC47
C82291767018909002301F04D445F8F69CA4B90D34988C1C1AE72CE581E82E69
F52A37B4A9D8774A3000FF4128513867EDA173A2E6C08D00E814009234E2A36E
FBD854F868BC9301D33D0D38023BDA6569691729EA004A3D96F0FBB300F405FF
1AA54C887BD6424A4B3C207F0ED2FD18B021DBB08CD31777AE4D4700A54726D9
8DC816FF725055C7E70F05B8582508625DCA254C16904F7179DD3ACA8EF3919F
E465EB90E99319899C4D60A587EFA6A7FE7DBD3DC333682147E2105C9451A8BC
7AF79380074F253C698B313478D3A564C264B7457A070BFCEE126AE4097BFFE2
8BC5BE3DF36D982F6DA163E04E8EBAC26CE37EBEF090A60BCE5C02B2DF2D15FC
9D97D1E357186D5A3C8B16A8D87776D25298647C3514979696EC4775770F0381
97CA706AF15FD39766DB58526E4E0EB6D40FB42E2EFE4380D683622938F8E6EB
53D389F05E6DBF3A7C2432298714E0B46F32590452F1754DDCC1F83A4A285F29
1DB520C4ACC34F630EB5A598F8F01AD48D6B944C6B578FDACC3669A7BD05A7E3
54B663F27E9E0AE96AC87E8F5A3AE047E5A06B890E2FBF998CCB227B15F5055E
D4FF6CAD21443FCB0B8C5187D9F70FEF674245F7CA22659539428A7EA29F652D
99AD5BBF20E5600B74D8DFDB34A1702E35A53D0C9B7812D0C8FC22D16E42D4DC
2035BA06E80AA6BEF688E64433EE16AD01F92C3E1151D860854EE827E9BA415C
AC185EF8832FD91945FB12800ECD53BB2D6DD72B747A6DBF08B14F8F7CAA5694
70FC3745BCABC5AA86BB74A4488BF81D181D4073EB078AA171DEA859FF1F29AE
A94498E99A7F918CC791DA5BA66AC5FB40C421E0C16D3C46C74E544E4477D9CA
81407F597285D71272F8E67AF1D25B0678D3D3F9110EBE86FC54C9B1EA117460
E13B81BD7183B95F06D367B6AD057F91D7FA68BBE1D3402F491CC191451EDAA5
888448F6E44BA4A7FD1CA9FF0F0518866C7FCBA68969A117C668A298419CD882
D560325D23D6C9D3A59107563E3127E72F011F05DF1203710A9F05ACBFEF8148
F6B1B81410785EB6DA94D505A6491047019065E21E0B89B3411E5FD48192AC08
8AB192D5FD4D79A0B9488583DFF00BFEE190688847CFA6C09FE15FD215777054
DD0A3952787E6447C2D2D2029732E142A89E62BA1DA9D79D7B94F47E83FCCD3F
21F1C77E0CC81255BE21A98736EF64B6B3B6DB61A8373E5CE9332D4C02E398F9
8CEEC9013327333249D3E33DCCF63E4BAC8BD41D3802E73A1759F4793E7260FB
EFD030EF90FAE8A4397372C652FD3DBC4F23DF48E50BFC4F309D7C6088274972
C95966C206A68A6B89B6C1D135B6E845384D014CBDBE9AB243B132410BE9AFC0
E727649E60F17A7F65ECD2F0A538E2FB187D52FC10A02EFFDE4B0B02C4AA12CF
DC5E4AFF785F69C7AB3A1AD11BE707CFDE9F0EB641BFC17D4DF39F26BF93E674
F89608E66AA32158BD27BEC8A171E48B5DD246273F1288526417D826C4C2A73A
F6673306E6F9A2F30616B2582FD29383EC5B4EAC934945ADEA6D613653C38DEF
05304F17C33CA9C3F79025F2652C0D4D84B3AD977426C8862E8CF0FB21CEBA84
222B3CFDBFBDADB6AEF42457E010852BDC284E0333D888C38C4A999DFF51E6BE
FC89A77F572EEBB5703643F303D8CEC572C02C6FA0D23CE0BCD2A6833C859650
C57AC3F4B563DE56610A215D44554EEA0B2A88A542EF28A81C942D30F01F3627
D0971645D29215E2BCEFD48819A8AE4705E462E882A4597CB2A52F46B16C2AC2
8F489A3075ADDD74A1428000509568FF9D1A0C9EDB6BA154237D043864B08F88
302E628D22C4D0B3E11ADD731012EA2F665855AB4B50BA28C82AA89158F71A1B
551203E7222EBBC1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 13 /fl put
dup 16 /dotlessi put
dup 19 /acute put
dup 39 /quoteright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 65 /A put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 90 /Z put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F362471AA58488620156F3474FA59CA080EA96FE995D2B3DEEADF3
3141D157481C66507725ACA5953CBBE1ACEE7E3F02C72C6552D15EB3D612730E
61A06A43575568DC3CF3844BABF04CA767E299575EF2ECAAC7649193843D694E
6CA59318C01132C361A3E43BE637B70B9966664E12EF4707F6B100BC37778D1C
F1806B1DE081D2C9B995BF1EE3842EFFBB8416161FE31633A6EDA118E563BDC1
C42F403BE8A009FC756406669E34C6A08668808E0C31A589D0720BE32F3181F9
8039645643E15D25917F38DFFD8BD08A420854DE15AF291ED675A634C151193D
29AA6E04E84A598350AF17E71973854842AFEC3EB1B58E4D4433309BF5ED9D86
32C4BD136C89169D45718A88BABE25072D8E552AA4CA3F840ECB11519B06EB44
13026DD6800CBAA90F3BF0022E66A54BE1059BD5D224B674AD319FF9987350C3
D9BCA7F584B4D9E304CF614565FBC76518B70B7A86FFA7A4E0AB3F6104C8F05A
2A12D463FDB1CE3CF726D64933BE3E7B9289E87FBBEFB6FEBA1EAE1D738C9D02
AA08AB09078B55DE2A262944551CC1BA7C3BA71DA7AF6F3FF85D2CE6329165A3
7B2A341167A07B6BA482AA6199B185491196BBDE507FFB9C97E5D683FC1DCADA
8C9F60827E89F02AB5E218F72101344849F8075AB02AED3FCC2FFC3515225457
3E0F83566D9C912ACDB47A6C659D9A8024608504C70F3F1F295ABE8388451FBC
75C49BE7F2AB7363B15C69C51C30FFEDCECDFAA8283B5F0C69751EAE6BFFD914
C68D9DB374FD89AE583C5305D7D01D417F2E665D749649B582C0632F7DBA99BE
51DF9379A94F73CE98034638C9F1157C210484E556C550911D4D3A68BFC49F59
A80AC602C23DB580023B78E053700AAF7D62A0D029488EB32C807010AA71D318
8F50329011E9764072044D3EF2EBC1CD9220AF724294478B4C661D4A3053878A
5DFCAAFAA78464C724796DF7D9F74C79089F6BCC251077A31A0D8D38BF4A654E
ACAED5922B324DC334ACCEE394FCEB4C04FA05E3B5786DC313AEC8DE2A1D35FB
42AE591FE504A2614B04D9FC14F2CBB58922F0504C850DFA243B121207728F9D
B1D9AE776258AC8C384672A037335D3369D34FB54507BFE116D1527B5003F22B
7F16601F32A03D8A738E2EAB972F27D5F94C12A038D0D94F45CC0F6CC85C210D
9CBA4BB87C8431A12536B4647111A677765724E26A15A8BC6D2F5E007376D491
EBB2D5FBCAE22D709CC4C90158CE347F60D38300FB213EE474C9F99464C25BA2
DFCD9F01244E104793F3C5263756C50C160F72255392E03264AE22D86050EE85
216BE526EE8AFF7AF0DA67F245DFE5372BFB079BF5ACD30A86AA938EE6D7A96F
C10413A373A9E0A3F73D02AF40BC704613422CCF769C305A274293F1133B6335
7D83C3C70DDFA3D23DEBD7FC535C46F77718A6955F9C81401F721123A828C424
B94677EA2E35AED029A5EF3D3C9FCE261DB374F049F75FC09E974E64A63E36F7
6D0DCE3B3BCA90B0ACF56291130D4859BD3323A0B709F40562D621E7401ED978
AD4C9E1AEC73F39A94EF9F26DBD3F8719D08BAAA7523628FE96F7F0362A7A748
A63C6E86178E86B3442888C9A7C62369E67BAEBC7F43467AEFB8389E266EB035
CC39C828E042FC059A2C0FC15DAE8122EA6503B560C49D125450C406CB538A78
4024E846CA49BD54EEC1B72058DE679CDAD3DD8F72FC219A921C572809EE861F
86F7038D627E933605E9AFFFF8D3C4527982F9CF0D4F945873774ECC50AB47A6
107604C5DCC0AB2D5635020D26B524DACDFE0D8DCF2F1DF739B07DA441ED1B5D
45704665D5E85622B48BEC7621CA3EF3A94D8C644ED6BD661F18503319391C9C
029B4B483894C9CE1424E86B08FAAEBD2D245FCE6C3EB10B884284F1E820E85D
DA9B62C2DAB8CFB4A81105CB44485B3DE79466007C7BAED2ACF4F95C63325CAE
1BCFE7649D78A4AFB89A47E6075EF84455C945EDE899A33A846BF3636BDB1C57
12A5FBABEC2FBBF4E6A159E9458813A190CD2AA31A1196B30481EB8D0920E6FD
5EBB1928CE9ABCE9B5DFD6E94B9E0033BEA181F7251A988FC31C987FA3B477C5
D9CA00AEA4880B683118A3A2C7C7355F5E45FB504F626A4AEE22BECA4634F060
085FE5EC3F1666585B4F1FA778D042DC32D3CEE75B91B36DB30896D298ABA327
995591AB2F7A93B3604250D0B9BCD61952E7F248955BA86C59535C34BA90F529
D78C366AD06FF84899642C5C56A440C189F404557D14A77D569FC76A45199A6A
207C86C95CA356603A8642D8BBA2974E2E2A11440F024431328D1694E7E806A4
B73F9DDF41F872ACF4D74275B580A55548097F65C8B2A98A4235B8E67BB0EAB7
E9CBEFEE6C31C94D08D503601AE06A65F6381A7B26F877F1B45D9AA70DD9CA31
2F23CDFF321ADFD514B231EC0221663E7C2F93E3959358B01A3783F1BDF4CE04
6EE0A9BB4FDC35D376F69786DA0A8084D81A116C3D07525C32A0D46BC864CE54
581C391849AAAF7045B8A0E597F49B2B203C4A2F5F8B75858AD33EE7F07A62E5
08D769126CC527B120483FDC5B2602C9D87938B75EF69368060225A51A1AD668
CC57919FB4F262F0AA36FD92EDE2786137DB03AB1019B25596A888D753090F69
B0B420C48E9DD4953A24C54146353F475F6B1A4F49AC496BA5575616EB113B56
EE2FAA608E9025109934F44B216B0A7C6B89057A76087AC267B48908F6E6FB2D
C71111A093D376DB237618616EC3372FC2618A058E234468B01F14ED1C079AC8
9C4FC4909B8DC64B7A36E129DAA7F80B8F54657EFC444D303624FEB31000B781
B65AE69FFCAD95AC5B4020B7840137663AFAC062A1E253BC8D424BFF4D9491D8
07D719E43DEA5FB04E14E861D75D21199EB48642444834DD47065B39A01AAAC8
5ED9608BB442639DE75C93E4D6213AE7F8C32600212964DB2ED14FF1564B2579
ACDCAF37CA9D60967515EC02E8C08C8A4F7E4DC34F59E3827BB71922BC948456
C4C1B11273DDD958754C913B9545FB202055EF55B23257C2EBAA31C5741786F9
D3068F4213CCAAC483B43B125086D3A0700D75942BE0F12D0279A832E885C9DF
4A490786C04073D13CD1C6DDF9E75FE714FFF3D54D89851407A50B7FE39A21B1
4E1C80B68F64FD00E286D079DB6B48930F960728CAEB99606BC079F3A3C054E9
EEB3320EC1586D52F433A827F7921122DC0DCE66DBA7DFBA40990829E12CD2E9
B0ACF32B773155A02B1FA6D33D9B3C7647EA20C2DF579A8C1E5AB8E661A7EDD6
D0CA544386D20915EDBC75E1CA3CB22F3D995B015C4F84399CE0C86BEE4488A7
9386EE3AA5F2D8120ECA4E1D2D0F3E573D0E799106E713C44800575E6F2969C9
2E942696B50ACD884755AF36824217A1FA558F1FAE676362564020E90B30FD4B
635BBD07953B80B8C0CDC25C60E8AAA3FF87692067AD2F9B62E5ED26423AA3BB
4DD0777B5B296C107B199C216B417DCE8B5ACA00EA4C019F0527C2DF4956D533
E0A067FD701195C076FF20F60D32FC9D00B3B3F4A3A506D800F52E0882EF0E52
24AE6576D77A35534B63906D36F788DF7EE40079A35E44648B188F149704EB45
943BF9BDC475A33ADE6EF9B4205BC4BB230FFA4C41C957505C045A37FA06B2CA
616D526C530E1AC0AF49CF4BC2A4827253F72C60587A0B8D6ACFE4319F85C43B
1EEAFD87B5398776E61262B5168CE44A3FBD9E2E67C4DF4F542CBB5F641E5669
0FFF27C9E7221A59643044E28E299A28A6790BBF76789C3599D4D5940E683E3C
09AE3F8FACB6982C8947A975860530147A41025117E01B71BD5DD0BC9F451DFA
28A47C47DAE3B333EDF91D25152D28A8903CB42EB0ECBEE50B52E247D95BAD5D
9ACED37A7E9CDA86B3581FE521107A6B11D123711C6A2D190F0FF39F0D119F03
DE2DD63D7B88B8CC5EC835CB023B92F6324D4E1D8371F5AFD6CA7C0A70349C62
7586F74CA8427F5CD5A5272D95E340A0329B0C08A1DCE60CE6C9FBFFDDEAE56F
24BE6E897642D0903F8C3EF367EA82FFE63C7ECE7405F67C15DECBBD1CF08614
A1983EA5F73800BA28FBFAFBD93FD0457A554866514E0403C2C2A96BD12D2960
FE36F59A487F668238BB5CB92F42E2F73BEAAFD005F6AC00367D8998F9D0CBFA
1FB85990E79A0E4C9EACD3F9B913E3A1194FBFC8D8D9094FDBA1613FA82DC6CF
801EA75B4C1FC38062DA4C520CABCC9BBC3B3C441EB7A6175B6A5EA708B88DAC
EAB857F66038539B37FD6FC48D02D9C0EB52B2243691FD21BAD53EBFA39AB8D4
E18896CA20DF47D2D16B5B7A2CEF0B8831E122CFEEC2DECF76AAB9B3BC3C3690
B26C7C9417F1CD89DDDB8EF1C9CA38CF276034181F5CEBD67ADEFE8D37C6C05C
1F250334F7043B31DD776F59E43B3A1E4F7D4A0242DBD0BCEE662A22DD90863E
E49D497F16ECA1C60FEABA0C5D97F79731C4C6E2E47DFB3580706C60245DBFBD
AF1510DDFCA4DC527291DC25FCE36189B6DC164918DEA34758E048B6062855A3
34042E14145F4684AD22D461E740FA854FB20F4B5EAA684B8EADC5D1E3BB7B5B
28ECAAE785AD4F28DD5B022349F53DC45B727194144093EA5553BCB27643E0A3
FBA8AA196E2617686A00C6D1F4A994FDFAF9978C8C4FDA172F473B436F7A85B1
AF08339F547BD11AF11F3AC0E23EA97DAC24C8044E3CF21DE3A333954BE2B4C5
73C4FD81E89CC923D8427AF840C0D45E8C6045871AF6D7D534484DBEFDD94BFF
649AA9188B28B3D9045323D07B0B85927A995D99660FDCC7CB5BAE64EA323299
77448ED8857C4567178CED7EC4EB0C618EE95451268CA674F49A5B9D27865529
2687D2534DBACBE48D5B3691438E30E78C807276B3720BC2409B6D0DC97964A5
C12F324D14EFCC432E30AF150E56CBAFFAA1643FAAB5745D9C344922C861C2B1
6DF880051282228699B35643CDCDCA71C89791EC36B03EA512AFE27DEC0FECBE
749654771CC7945AC138DAB88BD885550141E20D193D5F212F9985D5A7177651
C98CC2EB1E32A70DE341F8E784903B098D2B90DF2DD5E25026E786B86F9DC2F1
438F69E959DD834901DA038E36FAE3F3B4DC2F49CC9CC0EDAED081335A92169A
E858D397F1DB0A04B53A2867FC77845C49474A28AE55A8B8C79370CE2EBF6D21
AD1A841D6E4E72C8144CF75646EDFF8A58262A18C76403FBBE5F5AE5A8F46514
CFDB18855D49DA96BD7C43D5E812543FEEEA096020015673E16E9B0A293EE726
C5DF1FBAE12042D4A7D58861CEF6C938278B844E6FB4B88418E2AE1210AD739D
9858BBE7420387EB9BB045B7233C864F401B8C24195A16D55E6E30888E00DDD1
2AEC027FE63D1F185196C06DCA13598AC1687396A239973DC5F0A56B367D5EF4
82D5C98F2CA9076F7BAAD72B86273D30CE80C4831BD387DE322D4DE22F3D36C8
0100AFB794639367C19E6AD791830478BF6238F4E89F92A63B15B4ADC195CF2A
070DCA186E4287F4D975CA0DD059C623D10744473B4F54416CCC8753A4E45CA6
699AD082C2C396973F97863CF7CEDFF24BB42970F988619F6A14E82B5EF99599
69F2DEF33F946990D05100B931BD6E94BFB6F6EECFDBC2A59C27155622C67D3D
3BE8CEABFBFA00F3A9244BA8DD58CEDC2759C3437E63ED74F3D36632157638EA
D01FE4E17F894A0D112268D08914946B9F97B0F6F77D8861158E4F25738EFD77
C6561A2891E34B8C2E045AB74D44893AFF959413A27F2817FC4CA13189102347
4D93C05C07B8F5C74FFD1AA0CEC73DEB310114619C72CFAC06A3EEE24B69EA7E
95C960FE0824797246837223316D9B95720CB58EE03C811B74B36EB8F088A324
4E6131497BE757DE99CFED5BC946EEE394D91E2AD214C2CFEF956C31465894C4
C5CA79C7F2238189B03543EF3619C7ED037069031EA62E43D71E669620113967
26C9F88B023CE6D2B2F73654A98033473269179E2DC042D461EBE875EE541D76
CCBFC4DE8FC65199721A6AF22E96D2CD382D810311B9D0D12905946B08D67E73
69D7EBC547C5FD13E9EE43FD59BEC4B7D273241929164C6C4C98D76977E4694A
FC4AEF9FDBF2551AE795A0AAC0AF81DC63ECEA4E7DDD2536664515066E42E6F6
4F1301C965D13D5BBC4EF5EE8BDD401019B5B4D6BB109B8417F6313A1BCECEFC
9E3CD07D3C7B6EF3E1A796DC79C67F9933F8BF86D6B072BD1B85103574615988
C9C6AEECC7585B452D79115558506DC3B408D4D3706E290C1C5039F594D81900
2CC2C55EA66B3F248E9F5C8C5098F7AC0EA6E5E6AA3AA66C8F36F2FA45504E83
5F02D8287E1CFF2CA6CF6D31833407CD0446EEDB775ED51A3F2CA967112E4C0C
A29EB7654C9D2590628A028202DE7217C9221E6164EA1934C84B86449A027056
454C266FD8FFDCC2013C64BE912E6A355656B492AA9DF491766BF0E00909865D
648B9FBAC0ECFF283968A52C640C7DDC0FE3F54767ADD4D6BF03825C17F1B760
E7C32A29313EAAB8F7A352C98AD9460AE76081284A0D3D938A48642609979094
BD8EBBE21B7B6F7DDCF9384ABAABA2A40BCDBE3683D772F97F4AEB17046C1225
AF956713669667F9C04E73EB2D8F830B4F82E3D61648EE439027AFD2BF00BA21
DAC85942C1A67F5EAC637BD8F0FAE3E7C4DCADC70A04F8B3026858C6C76E3A98
2A936A00820DFEC3FCC55F260DC65809B478F5093AAF7796F7AC5604934C17B3
71EB51BC861DEB93085AE3F23AAD4DF00F86FCCA06B7724DED3B87D46BE6AE2C
074A5945FE31DCD0D8499A6954A75A6587CB2BACBC5CCF150CCC2C52D62621CC
B77EC2AB84116E4ADB511DC23CE24BD7376C275E174A9B53958DA29515D64B09
EF38B6C6F271E29F2FD65CFB8AF1B5D8EC3EE2EB15822FA0DF24047A8C1DE329
5500AE71695285CE10D073869620D7DDDAA30693DA1D93DB355C359AD7ACCD34
02C6971D61F5D25304C3D749FA3CE814878A22A31107E24A7EBEFFAABA1FBD4B
7D53745D8E0E609A67E513A09A91890689A4CE890FAEEC6CCEF3747E5132B8E4
5427AF33F220C8643C6E74D54A52003335F3D08071160F4A8ED9D7D1536EADA6
FFB77D17B85AAD05BD57F4C435AFAF1E45A29AF7073A59BB44D867053E71BC3A
3B72449D5C8C241814853C3F3D657C5CA974E7BE6ABDCA143D9E31F1459536CD
CF7C61E1BF9940EE71E807A80DC60AD7D8203566D8B594FBC8D78BC8C200BB97
44CD95ABC2671A405DE343A54BB9AE2C54887EB177D6B8698C62A925BDBBF801
A2D1786E07FE3FA0590530B919904AB35D96C7FD9E876B0829DA08AB7C252F76
66A431EA0AC417D110AF6843FE3034AA3CFB2616DB25ED19F7ED24A83821F0E5
146EA05B34C91D1D4D8076A5246D5971D36134F353681FD4BC63A875BB8E6AA0
FFEDFDC1DFA8626FDCE9C76B720F9B06DD6D8635C01806CFC66471B17562C048
4CE65D0B44890049A9F6D6970B23C12E772BFD827B5E1F0035F01F710F91F128
BF983A25275C955BE49C3B9DEAABD9192E3663EE2B69BBD59767983793EB458B
13362F11D550B8EFF6B9140B3AE3DCF86548ADDB2D5EAAEBFF431901C3FB02EF
3BBAB6F9C5F6CD67294F687E557FCFE7807B9EA722B3E93D3B7128E4B76EB307
5071CC803F1CB6A146C8232CAFE9182F8EA538A36A836D9A5BE0B82BBAA16537
D2D88077910B9CAE36114ED47643CFFE53B0F28558C8D3C4D670EF1D3A17F584
ADC293A86F2D9B52985E8F87307E98F1FBD3315497FBAB6312410416B6B0C6B4
E44E02E34054A71F10FC4CED001100AA2EEF0BB9EE38FE161C4506FC311DFC53
5B7E5A5404B3E836500F778B165823557E74FC8834175BED8060D177411EA98C
71FA3847805F79E3EB7D3A2FBF050669DEC60CF5608519DE83073A635E731255
609B50940619B585519971BEE46892713A3FCC17091DF5BAD0D1119FDE0E7BCF
84D3CE62B50AB67644FE7D606D3F4F53615C61D226D0171B885009EA07953F56
2611922466AEE5831EE06F77D309064B7A2569A2BD9111126C471AB40696C38F
DAEF44790B38ADACCECE4F4E3FC6596C2560DC449F42DA420CCE40053A50B050
13B7BAD40586C8F939C06264F8DED7D4A4A27233634F692FFF003FB3AF95F838
4BF501C53A833D9595FEF7B4BC08EC3D1FFC9B0D5B443366A8AEC2CEBF8EBDD6
2B16DD2A65B724B975BB778B8BC9CE6E168FEFDD0686C7635309B468D85BE28D
B886D417CCA07060CE4DE493B8C5067E8E2761F5D62E64A4DE282D4B2FEEEC16
70BA8101BE545CFC6A1E451B079F1BCFDE2F8C9C2D8FFF047EA6604ACB9C5D21
BAC7F4E3A40C9EE958743CAB16A339F2DD0274136F20F0E0C556A44CA3E0EB47
DB2CCA648721E388F4269004CE56D725B2DD10E009D3C286005C0E651AAA06B4
0BB7537C5686CE514E2641577F80D5D3F661AA0B48FD526FD837B3EE3A63F288
44D62A97F31429EAA2A5BFA5D394237412217CAFB674A55558ED04980C3CD4C9
B65466153D0724975BBAEBB1278BCA10E2518A524D6C8D24FC15F45E59C4FF40
F5F0226654955E80DB548DDB0DE016BC880EE412AA1C4257ACC1D9CD6F15F4AE
BAF581D74FB9426A364F90D4848248B2D246A6E28890167B2ED979860478815A
1201816B43B4B17BBE5E96F4D77317F91F96522C89073BAD94C68427D035B597
F942C602AE2E180D0BD07ED15D096B1CDCE3CFA3DF03D39CAECBBB0B9B743486
E0A3E45A752D31C3C33F8E33AC16AC300FC149A7C2A18F2E0D9CC74572F20B28
C79CA6A061957009E4C00D368D1531E6EB0C4FA6D3BF00AB0BE269B40DEC9A02
723BBB4EE5E63D00FE0DF48C647A0301AE261E47B4A3BC80E2891902CA6A80AF
4CD01AA09FC944BFC7F0299EDC488AC599B2C8CE73CB7022D7B1672A89E9A043
080A4B3535311BB04538E2CB2E9EEAA61208B5CDE5E910DEDA4205D4FAEA8AB3
B34527D1D324089EDC04D5C5CD4E4EE0A93E268ABCCA85FCBB2926581E13622B
C5D2565242661425C77CC67FA9E0865CF5F4E5B0857F4A380CAA18CFA64894EF
2EA57FAAE65A9D79C331A4600F573D4980DF676A12DA94936AE26FFCC11E10B8
88DDEE4BFC4AA755A613C6A7A8F1B8BEBD5C40C89ADC2C4071A11BB6C1FC2A4F
EB0B129DC4703BF4C4F614311C74B0C25C9359D94345BACD849ED500D1656046
89BD1D5647A8009FFC9E9E218D4FE21653571EAB9DFDD509940F1C4BFC78E374
E40379AB99656555A7F2F4DEAB5BAF657C0B01A68B39B3677B95E2595674848A
17FFED9E387A724F84078E003D6089D31FBDE32BDCE30EAAA015F5A230B44843
C4EAED7A6B33D55FBBA8E705FD973D8339B18AD89DE788DB3304FFBA26AF707C
3F49BC81C1AED816A601872BD4E80A498D73C58A2D9F5C5539F49BDA2A554581
7A7BAE65611AB486989D82DA78FC8FB6BC69DF52711ADCB28227A3C400A4EFDB
A1B243A4CFA6CDD0159F07E070547C49CDE966A0BDB7908C057ACDE64765CD5F
018F238812B77C58B2A9B91940F924EB67ECAE9882F7C6D1BB91182B52B72D1C
4D245B128250025073FC3851389ABA590366AABE0670DD74FA793B2D6F0E8B4E
24622ED04993FAA5EE55745E102FE1D76F25235432CBCDE16967E3376A37E54A
BA445FF958E4CA09207973891A7EB0D284127C4169C913292B23C451F60A2469
1B80A0BB08449F22C17C5E673DF9CBF0F3784186BD0CF140DA136645F1EE3008
5DED37939E55E96F10584E5BD1FF56130DD29816B53475C1557F93CF562230B4
49E2C74295F23E68C9372C4E8BF736A0F0B53F40AC51C8F995754AC7913DA640
45E95A2D93DD73430C2DE29FE089E9B07283F03DBC93ACDCA8B51E643C41B397
75728F565824E6311B142136A1277E2596DF5583D60B9B6FFD37A1EE365FC61D
EF6ADF9D5E07E1AD916F49264F56FDCAADBC1E51F835143452DA9F35148E1ED2
DCB8B628D2E4CE2CBF8F1793A39D7295C34ACFB0992BEB6FD5400A69CAFEC756
6327964DC4D95F7AFFD440FE0F87037DBFDAB7E60A63D5635A997C4424DAB17E
F0EEC0C74AB2DD3A23895CD62B3D10AB7D219E7D251673813BB12EAB6C56DF7F
99893E9671FF80071BCB3FA8278069BCF8A16A2DB0E464D5E21DD8A326C8A52B
B03E8FAE2E00AEAA2F94124D97BDC71102ECA5A8E2D20C1C9CC733A1C0919438
6BAFF89ADD8CCA12AB40A9F5CCBEF00646547EBD262364A580ED2048F4F3BFCC
64075E0807871245D17948A44F318EE90A60E3B1A8A17657645C011B35674970
BECAE3E9E882F6E206D7976B385F5D2D9282A06D823A7CDF63B82D3C3FBF6D1C
7B2DC003489BA42CD3999E3B82AAAC826E69402B4F63A1F77A006C81A9B78D1D
68147D7EDCB4B30E4101D29C8CF9E1037074CC9E1CA238ECDF479D7D9E8A5316
76397683D9B286CC93FB75E0DD06DE1928BC561240612B59B0B2FF2CFD382D45
712751A64F16E1B3B848029DFC4DE51B8301DE852352EEF36D24BE8B66F0B4B7
CEB612091BDFC4F88980E30C4379147EC24256C3B30AE4C04B46CA00FF2426E2
2635EF0E92FB21A5B5BC923A66D019F91B37A50B7CA0DD05EE532BE683A82C4D
47937831DDB7ABBB4415F204A7E6CE71853B02B7991FD6BAA7EE44A5E4C85107
8A892F534DF631299E23AA52A08F3894BE904F870B98586422F8B7EDCD321123
D363BCE80BEFB696005229C4D5E2C1DCFF785F36DE1514E38307B74EBF2E9E4D
475022D26A91F93BC847340E50D5EB6F7760B2133A65F46B65151B052BED13D5
982B00EAD91EBD30E576A8B8EA20C197B0791FB8B5519046B977EE1E2C7ADDD0
659DF0E59ED66581DCCD4761BADC4AE0C87DA1AB576D0840C07AFAE2664A8340
572DA085F6714632E794EF332D933E8BB0395C61735EBF28171F0F3818D2F86E
4AC4F1DF295C18A25A7EBFD7B171C3582E0428AA6DA4BCBD33600C0393709B41
18B840C54C11303C2A227AB8F0C69D272D8074CDD68388DB1917AC3DCA179D27
842F8BF2A6510EB6DF112B657AF81C68F4B0B8CE199C99E1C6E5410D71400955
59C117852AF0B6BFF9BF4FA2C2D0A6B4FFF80B5F02D12BECC83E91125E634C71
F84A9BE94C45793783E0D2914A70EF5C9BDB948B0420715B5768AB9D0E40F03A
18EE879B797A7AC99C633DB14B220B11B451B3D9626B1DD6D7F30167DCB3B61D
5E49244867EF7949C3AA99174B15C27E8A9B2AF53FE0DF838F26BA8781171FFD
A2CBF518B0CF686184ECF835072DE47158182B836F76AD0D98E3F5C572E682DD
56BE087C231B23AA39BC935DED24E676E5E6870BE97D1696A19733A39757F96E
3B071DB4DF8A6443513BF22EE87FB412B7ADA4E79BA7002F90FE2ED56B911385
12345CA1FD2E976F9065AD11E10BA2586EFE8809019E3617F1A3A476602E3B68
5EA0B9769A9FD02C40CF80AEB7903921196DFCF1C3A6AD7BC82A0995A23BE62D
19980F23689B4C546C01641BF1B17F58BC5B5A234B5E38C6AC5BA3FE21DC9DFC
53902456D8EF6918460ACDDA6705EC58A2045BF5766CB7C5074F22BE500FBE2E
6D321350B359A6CF2F868C4B5BCB76DB1BF08FD21B5CE8B8B4CC75C2709B7BFA
12675DACE0CA0330E35435E7F401937C7AAC2C92C756B2D1B33A24BAA8C4DAE9
AF1C0D4AC517518DFE2B2322C657907887C106679FADF3E2C1C056546C798286
46EF50BA0A2CFC66F0F20A4EB4B052763B7F391013DED3700555B9C9A25C7F6B
6FB8CDE70671152259588D84B6B37B28B1027A25DF81576EFD21ACA677A40FEB
ADA3DD65DF32DA4216E9E9716CA94D1164A4C53F6A3E5BF1A7FCE849AA927FA0
0261D69137F603F3EE91B38457540398C8CF9772E43A9BF69ED561D3ECDF0DB0
1423D47FCA087ADEF8404DAB24AF3DA04798CAA7AC184B41A51C725B10EEFAC1
D3CBAA51287DAFF67CCC2A12E1BD8DC50229451A72B85FBC3B904958FD0ADE32
5EFA7958AC9BB93E2B4DE395326243CF1CD7B6B737396200B37975FC4468C277
06C55518A14434F67D2EA7ABC35F68414923743576F094065FBF39668EC75DB1
6702F1AFB8BBA7014BC9917215A0AD4B2B062E5EDCB030967BF221F6071D89CB
3FDAC1A6898A2153A67FF382CF6D935CA4BAEA11A316F88662414E3F4A7BDF0F
B4D4742339ED73A0229B62EB29E231F445DE626E3DE91D07F3DFB0D2FAB9ED68
A17AEFE0602C17B12E66445E9768DD3C21B85FD4D24DB03D75985931AA92A7ED
BE8F5D3D25386EE3BC577B50EBC743E1F28F3A58FBB15689B6CC1DDEC9676FCB
17897585D9D4544A33DD05EB20CFC8DF7A096F87DA69B52142155A7928DF86C2
62B9F84725D2E362D512032F5A7D2E98B6E2BECEB20C7555FAFDB66369429AAA
E1CA4D0D1D23FCEEAC502FA23639BBD652E434DA1A178B06A7EE142FEAF23634
CE21C11587D9970D008DCE2537CCE82822BFD0C4EBE422D3B2F452E5C53A0013
577A3ADF67E56A780E38D162C6F34219FE6BC097068884F2462CD992D021D957
06788D23CFCAE3F78F40E9A4569B73585B120613C0460EE852261AAA98345C79
3FB010B85BD8E4FF8B7A910ACBDA2F71A5114E6E8325C0445D788D1356767003
1AF95772977D923B856E10BA82AC01EBE32E1237DA093F39FEC64B00B9ED9D32
C1A7AE8956FAA72F1A4E53D1677058663F20EAB11F62AABA48CD601358BFC6EA
E094C614B0377C3D6861DF550A3018907FDB42785D1E61FB0163E26166CF9E1F
CAFC4B27275E58DC06C38BA7F2FAFA3891BA91C5B40AB4B484BE0F1496CC1801
EF9DE2374BF6958C3E2815C1C32E7B6C4B197CF983B7538448D7AECA8410C1AE
65F9440B0DC3452319341C32B41FF950286C13ABBE564D2F231D2701B74F5E64
5D2EFD3F6B61271731BA83F75C2927A097AD8D20E37431B210300B40CD3769CE
DF95B90D45EA2262A0B75A217B63995ECEF65EE84FCD304DE594CF8D732D64D9
43B77C511511D5A07527ADE65426BE3EE2D3896B6F9237CA629F5580B85F7FBE
21E8CEBF786070E4F0A0A1CC02A625690B29A3329A214EF758FEBCD6AD79F056
6EBBBA213121E402C390D5538C528B3EF93078ADBDEC0A81CACBA5F7192F1D96
CD5FA4FF94733BF42CD879299D6EEA5EBA0169012E5CC50EBD6D28869039B567
3F1930BE9D5134C547F5CF6592F155E2050D5A7A32246B7B591EBC2BCBDF5A11
6D71000CE1FDF2D6018AE19A16277EBDCBAD7EF2CAFCCB7816A87702A523515B
B9CEFCF8EDD7D2967EE769B01E2C1517FECCF051BCD7E429AAD6A07FF76C62C4
44C6C04631E9AF499BDB415F21BD615A8EFFBFE8EE8CCB1DA1A852B3B510D13B
58A86A92FE216606C15BEF99F0E4A8EB387E08795DCCD7188A862BE0C5AB1626
DBB907688536699B8B5CC3DE1DF8588FE634407B35BDC633A12333C4D9B2E436
C1FC3F87B0D0A1AC59639E4930453E7E85BB9B290A08D17705E9E8AA3C388D50
15CBE2ECA0618D6F7B770A25C57197487E994DD2DCBE5E6C89C4E666FED78C7E
A6F39DC44B236B004BB7A7535A15066AC33EEFEC631D2B1F26F6B77321777276
4BE71634BC158C65EBAF846967752122317931F94805777EA73FFE3B232242D9
6195B72D45449851C691B3F72A045A87F8CA0A5A8FBBD1B65380E7DB77588FC9
260F356E90C3641DCA458B9D1F008E72F37642B22464C8EF172379E6452AAEB4
58A08A70927BB2FB91841629DFA901540377F1865AED44BE4E5FAC5BECB4D5C9
958C4969132EC2FE75D5EE67391D9DF05285E9C2274E2948987C4D3ABA2D480A
747641D087D6CDCDFE1222A55F0F1460D2CD3EC554462A66474018062ED2AA50
410EFF1AEE737A9629411DE35CCED92C16599CC752E646F21F0A32248F8799BA
8C9323068DD388D23FA9E5AFCC4C1EE0875FC2C7B2201B25EEF80E94D9E784CA
E15E88F51072AC94B7A16C66829479AB84FF2DBD9A5AF3B5F42E3902376029A2
69DD523C453792ED7B9A45E97A0BD832B7C4D3E95DFFF09962573C190D237A95
5F11CFACA10966A034A580330810B33E6CCC709B2F682D77F83DEFAA24027775
BFED2D678E3A236184C5A70276DB41C26FBC803E062A2529B4C1C65E794A96F9
8464CF57B6DA7DBF55F859BB31825C684D0EE23E51393C49B878455C8D5E4A04
5795F9821B211F730AC8F3FF091B87A15FF70363C04A53EA48752688119E2FC2
8E17F7E4A8981FF743FC535254575AE8525C169C3BBA3CB29C051FF52966A927
637FBAF81B7FF59C1757FA8B9CEBEA1952B112DE203265022C08EDEEF5D55632
B08DD134DAEF3FBCEB793284397AD41D894F2B8619B27001A0BF14A5D39DE3A7
AB7E3B1221EE4D6926C0020A4A89A942C70922DBCF78E43837D8B5954514D42F
1E8980023C67F1BDB798D88D96E5304E6DE4DAD2F9798115350F42E8D96A09C8
0DF681AA59E53F7BADCA4295C23ED94A77FA34EA763E67FBC4A3FA1043642E90
51545C5FACBDEB339B00DD8BF61FFCF79E89C205A4307B11ADFD3BEF192A664F
06DD86C74C1DFDFAB8139D335F70B80AFF9E1AE84B568B2C2308CB1E6186B176
09C1F1241793FC6EB36FD41FB59AEDE09DE72B6D64EB3E8E0EE364CADE53CCB6
2813409EA3CBE560ED8C988EC66833644A064D77BF335721FF5CA2014FBFB26A
C42DE71AE06E736D2BDDE692A3750F4F7A6C780BBEBF48CD5B4B4C488D40AC11
412E0CD71DFD4FC3756F25A7FD1F396331208B8544DAF71E5C66C622FDF68EA1
5544C343DD31EB9BB32EB18BD82A7823D2A9A4A40AA1249F3175E65964AF3359
C6B728000A38DE1F601396E11E2B29E946D9637B0EE180A4C566A8134F899F80
6C2B3536A0BFF168EC8DC8C7AECB16B5346C4D360E07DE184EF9D3A063E98588
D1B233429F1E37C665659F290ECFA8B651D4BA87E1FC6EA63296ABB7DAD71876
3BB372620A74481B0B3B58854FF6D5AD8D8EB7F078DD5DF93B8C5C85348DB506
3A706F3C3D500381568267265C454798DA447FE85ACA947ACBF46A4C88271FF1
FB61837276C45A7C6DD85408B2CEBFB0A3A592DD923AA2FD9592094AE4011C00
27DA2D017A731A0DD215AEB32382017DBDBB6FE7A432310F8017AEAE0F07206C
E3936A77A0A7E35AE80359E6E5371BDE52BE5A6AC41EEDE43944D7FC7059ADD2
69674FAEE159D7CAB8007867DC23E51DCF8D385E12F5C40803CF0A2876FD4F7B
8AFCF29127882F071A8287EDF728F70AA10E116C546A29A1052E1A3C0987A9FC
0BEED02B7E94377FE32B6A943EC831CDB9F3B72CD4A9183468A820CEAC526BF5
10B8287360C7AD226A1A4F70FF14D076B9440F6FCADF258DCCAA7C78EF517C38
13BA73C2F32E3BF6D542F14DC9532DC0FBD6863940C9F50D62D083181CCC6F71
0D63B468ED35CE9217CD9AE692BE1E707834DE14E1ED4A2D7D651C08DAAFBA48
7381F1857091F0728E9C10F5DD4B99DF12877D3B3E49373F68A57AA26387638E
E53651A9C669A0A45618BACAF9AE523A0B589D3470D376F498EC37E5EF72D0AF
DE3CD67248E13856263D41A13F1797E9EE10FAB35889DA465A57A7660ABBB77F
8E1DB97AB357AECC4D5B97F52A25C098FA1BEDD7532AAD8CB2D59E81C480860C
6DFC9EC6F6CD5020B89BCDDA6E4D115B6EB4D244E8657DB7466631822AF11640
4CD9D7B90F641760AED1466A383F66CD17A88391983B2C7B0AFB7508DBAE4F5A
00D20C1EFAEEA9A5FA765A2C83DBB0D58A13DB72F11A5F0BC569BF0ADC3AD5A5
651BCE8017D90630BE120D8DF460DCCDC0CECA5E8F2A71EB3EC0150B9D2BBBCE
B237FCA6E21E9B9FD4CD09561592E51FBFE29F791BE57ECD9CD837549FB6A4ED
42741F35C24FA5AEF8F3C8E7F2A37FD05A05E3854BA561B51767D43AD379549B
C239726D7F66DDC63604712580AE4F9846BEC2528625C55241EF3C43640768AB
9CD48E59D4AC6B1A575CA03C9C8C6A1269734756988057E34CCD527D8F6B61BF
FEE9A540BA2C09F440CCB5F29E9439F4DA9F173C7C4009B80E26752CDE41AE7C
2682531527D839645ED602BA2A1A34A4949586C8D9EFA99AA67B26FE9274BE36
7C8A4B9717C84465D399B0E35E24E163A6E7A953D3751498E8C8A4A3E8E24BEB
89FBFE9C1766C79D6745E91E038C6352EBCB375B0953507204EB497263466BB2
FC8E9A1FC74F04816339F40EE3B300E82AC50CA1D329CDF87DD7D24A1B9F86A0
6BB4AE4C954250F6B6EA3807761A464718EFCBC083F46B7A5844AF8A179E27E2
EABDCD095A028F0D7B8FE953533D129C95EA09C7B6F457F4D59A8631091D84E9
CC2590778C8F54B0852CD614AC8E79BFDE72095464E45CFAB8EEE30269905EAB
079C99FC0C7BA115D3388CD432CE8D5C27EEA2D92D62AAF1378B0566E9F4BBF1
692DFBF4748DA1CC0CBE193D3C7FB2714F8F5CE717E4D6CA24DC3F8A73A49CE9
71F827AEE0D9A8649914C942F1A7FE1190CDA0EA326ED1534DC7D1E7CB47F2F3
9D38AF523AEA00A54AFE7672F0D3BDA7AC2FE5BD397581E7ACFE5F8B9AE05F29
8496A7DD1451BBB00793C8C988FFB4276F6BC0CA3588BFF3BEC885CAD1449764
D464C4976420C76FC705B1DDDAA6C3917B8F62CA154E31732A2F8409FFEF89AD
4B13BB62A879783738D590D2E2BE668795579D976360E413628A179A6D98D649
AE1CC8443910E071CFDE7EAD06A1EA3523AB9427C7007D2922EA0A03D21252FA
544B4C75B5EB6D2FD90D4624E294026770155BE6B1F63EA0BD3A37E641344896
6769D723B7E140188F0261FBB18886DEEBB5BD8494B49B50AEC0FDAE4AFA7EF4
05FBF774C25FD420EB0CE29686ED57B38CFFF750CC262605894234FA8F98C446
9AB3EEC14C9167D974D635520606A6BC02C981BB7072DDC7A3FD95CF2C3895B0
81D916DF07795919F08BBADF513F2014977D4DAE2B70B19956FFC58E8573524B
AC83187C8F6B3F0EE45A646A693373C71AF60EE608D8059770EEEA7718FD1B88
2850822C0C5AE16661553807C8C2F732EE24B62FFAB0707DA7C59885D086CEE4
225A3120BC0935BA12C13B70DAA1EE9EBBF6B0B655EBE0C2EDA0F8E3EDE84A0E
18E03113E52110E09EF44CEE4B4622683E08A27B26C4BB88F6827A750E60D92C
763471E1E51CEAD0A342458AB5E4FB9BE6ED1B10A5C59716D07D6D83F450ABD1
799F85EC77B575BC316847C77F3A81AAB5CDAA247847B384F1F10984E04D259E
5F3B3358DBD9F7CD58C3D550DD2F69E18C347D127B25F8CF2CBFC0AF3A06426F
AA1273AD33F9DE0657CD5AF3955BA710E97328708C16654C27B8B88E746B1606
728781D60EBBCC46FDA1DD08BE84B14646D6E8AEE3B7CB72390E1F8427866104
EE6CED1CAF1F0075E47D8887A6700CF9F032638B925DC20EFF023754E75F9F5D
DBD754C4AE972BD41C97753D33E673D06A06E63FCF25D6ABE5EAAD673080998A
78F0902110BD0B58191070F485D25BF73F7B6AAE204FE4410A87159D5680AF2B
A4A864B01E91385ABD4D63FAD33F1CB0F0EF3C0D1C602618F0750EFA99467083
A3A66C6BD5455F23169F89A3A902CBB2B2EFF77929751F8FA92F5240BFA22857
78DF651D0B00E5F3AF1F6B3EE02F79ABB436154CEF360097B64D57B77C13BB45
4F0CF65EA45730F0CF434D4D1C5DF69AAC4D9B6CC00136E4FE674ECED3552754
01FAE5A40A929409B3749668E0C7477246724BFF969A0172D396CB998346C97A
A4649F8546B6362C203C3B808A831C1812DBB37978849E76CE39443C9EBF5889
DB6C41980F3BF04EC9BB03FA259D5A32497BE0E6DA9A13DAF109338FFE73F923
11B7F12F1638879188BCFE9B3782BF1AE29AB5B16476F0D440413667608161E1
7BCE1656E4CBA406F51E19DFF2125DA2ABB87C6A20E790539DE1718B122B4076
9C4BCE98CE2D1B43293D6F268773EAD4A53340E2C4780FE25D0DDE3BE51EEF63
391D3083DD7D96628531CFC16CCA03E06175FE2483DD4EFAACB3372BF732B972
183E994291AB3494CFDC11F63F3E5C3256B365103E0CABDDF7454A78B69FF8A3
CE300C09D44EE6A35D69ABD6402ADC631D11EB8CE815AD6A38CB213F759B3874
99D62656FA1BF64F3A34BAB3A6CC91573F2EC3F2A39AB043649483C985A9AE91
5B87C94369854016ADB617F25C2CFF209F8039C3DB62CC5BE3AEF39C00596B7D
16D1F45AA0B84DC8DED22CA1283595512259AAA378819CBF0F995F98119BE41A
A8FA40FA82F3CBB2D5DEB97BE5D0A0F07E940C13CDB2D284087C116D6237D394
37EAF4F8B0E64D705654F266E9AE0ACA90DC006F5CAA1312A06BCF2C1AA6BF4C
204D35FDBEC6B97B19FCA80A333EF4ABF7B994D1BE8DCBBF3F13799132AAD9A2
061E487D6F00F4ACF898E0A6DB128331F2715D093DE5E63516BB9485B0A336BE
A1CED18AB86865317229961BAA27A6F5CA9B7FEC62C3C81C41F526E0C1F2D603
F6E85EADD4C2A7E6027E7015A0094AD0AC4B3DA3F50E3907F1F472A4AD3C3B49
D4BF88D351839A46DC1D0C496E7972E66C563CD30B16FE335788DEDCBFE6693B
11C51717E496D6E605C61E778A6C38526E06FF05C854EF6FFB271E2E6F966D12
C1BF536691BF079E671D2F4BDF2984A03486DAF022A344F6C6A6D4CAB999710B
346F19FC1079051F3145ECC1D534D54DCFD526C51A131CC49D64F99D99400617
11BDFD9F8C19C583A5D25D47C60FA0360C8B1B86733D9733B32ADDCFCD450919
1E461AD28A9416FD81E2AC4DEB86A46D5205863A6D0A9AFB02BAEB8B71505356
384EF72BCDE83D925D1EE7C58846B0C07AF91E5351F7ABDE676C45F71F12B876
04803EEC2D08CB078089D576EBC83A42A8A693C72EDFFF693FA7A450C1BECA88
69C74A747989F6208CA879658FA9A276407D21E6CA4DE8282D0CDBDF239AAB61
347341FE289654130D84CBA639BE2844B091109DB53E929E742D72CA62DDA24A
3D25C0C2090E0FBB4C06D484C60C12B155495FDBFE96DB50D5C3EE3DBF802061
97A68DD3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (informe.dvi)
@start /Fa 205[48 48 49[{}2 83.022 /CMBX10 rf /Fb 138[75
52 53 55 71 1[67 75 1[37 2[37 3[61 75 60 1[65 6[82 5[94
7[81 3[105 21[67 67 2[37 26[67 19[{}21 119.552 /CMBX12
rf /Fc 129[49 3[43 3[51 54 1[38 38 1[54 49 54 81 27 2[27
1[49 1[43 54 43 54 49 10[73 7[73 89 2[50 35 3[66 11[49
49 3[49 49 49 49 49 2[33 27 2[38 38 20[49 2[27 16[{}37
99.6264 /CMR12 rf /Fd 137[70 1[51 52 51 1[73 66 73 111
36 2[36 1[66 1[58 73 58 1[66 12[96 3[90 103 2[83 2[47
7[99 6[36 5[66 2[66 29[66 19[{}25 143.462 /CMR17 rf /Fe
141[35 12[38 3[42 12[59 32[42 51[{}5 83.022 /CMTI10 rf
/Ff 133[37 44 44 60 44 46 32 33 33 44 46 42 46 69 23
1[25 23 46 42 25 37 46 37 46 42 6[51 4[62 60 46 61 1[57
65 62 76 52 1[43 30 62 1[54 57 63 2[62 6[23 42 42 42
42 42 42 42 42 42 42 1[23 28 23 4[23 19[42 2[23 2[46
46 12[{}61 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray 118 70 a Ff(In)n(v)n(estigaci\023)
-42 b(on)26 b(de)h(Op)r(eraciones)f(1)2237 b Fe(T)-6
b(ar)l(e)l(a)30 b(3)p Black 118 194 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 118 194 a 118 194
a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 118 194 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1064 626 a Fd(In)l(v)l(estigaci\023)-66 b(on)43 b(de)h(Op)t(eraciones)g
(1)373 808 y(T)-11 b(area)42 b(4:)h(Algoritmos)f(esp)t(eciales)h(de)h
(Programaci\023)-66 b(on)42 b(Lineal)1408 1061 y Fc(Jos)m(\023)-46
b(e)33 b(Escobar)g(\(2804320-1\))1383 1177 y(Miguel)g(Ib\023)-49
b(a)s(~)e(nez)33 b(\(2990010-8\))1212 1384 y(V)-8 b(alpara)d(\023)-38
b(\020so,)32 b(28)g(No)m(viem)m(bre)j(del)e(2012)118
1754 y Fb(1.)135 b(Liquid)o(\023)-66 b(andolo)46 b(T)-11
b(o)t(do)236 1948 y Ff(Una)36 b(empresa)f(de)h(retail)g(se)g(encuen)n
(tra)f(sumida)h(en)g(un)g(agujero)f(\014nanciero,)g(pro)r(ducto)g(del)i
(cual)e(est\023)-42 b(a)36 b(al)118 2047 y(b)r(orde)26
b(de)h(la)f(quiebra.)f(Den)n(tro)h(de)h(la)f(gerencia)f(se)h(manejan)g
(m)r(\023)-44 b(ultiples)27 b(op)r(ciones)f(para)f(salir)g(de)i(esta,)f
(siendo)g(la)118 2147 y(con)d(m\023)-42 b(as)23 b(adeptos)g(den)n(tro)f
(de)i(la)f(dirigencia)f(la)h(de)g(organizar)e(de)i(alguna)f(forma)h
(una)g(liquidaci\023)-42 b(on)23 b(de)g(pro)r(ductos,)118
2246 y(p)r(ero)k(p)r(or)g(partes.)236 2457 y(Es)32 b(p)r(or)h(esto)f
(que)h(la)g(empresa)f(decide)h(catalogar)d(sus)j(pro)r(ductos)f(que)h
(generan)e(ma)n(y)n(ores)g(ganancias)g(en)i(6)118 2557
y(grandes)d(p)r(osibilidades)g(y)h(con)f(eso)g(p)r(o)r(der)h(organizar)
d(los)j(d\023)-42 b(as)30 b(que)h(dejar\023)-42 b(an)30
b(en)h(liquidaci\023)-42 b(on)30 b(dic)n(has)g('\023)-42
b(areas')30 b(de)118 2657 y(la)k(empresa.)f(Se)i(pretende)f(v)n(ender)g
(un)g(alto)g(p)r(orcen)n(ta)5 b(je)33 b(de)i(los)e(pro)r(ductos,)h
(para)f(saldar)g(las)h(deudas)g(que)g(la)118 2756 y(empresa)g(p)r(osee)
h(y)g(as\023)-42 b(a)34 b(p)r(o)r(der)h(salir)f(a)h(\015ote)g(n)n(uev)
-5 b(amen)n(te)35 b(en)g(19)f(d)-9 b(\023)-32 b(\020as)34
b(plazo)g(m\023)-42 b(aximo)35 b(que)g(se)g(han)g(dado)f(los)118
2856 y(geren)n(tes)26 b(para)h(reanimar)f(la)h(econom)-9
b(\023)-32 b(\020a)25 b(de)j(la)f(empresa.)236 3067 y(La)d(siguien)n
(te)f(tabla)h(m)n(uestra)f(las)g(6)h(\023)-42 b(areas)22
b(de)i(la)f(empresa)g(y)h(la)g(can)n(tidad)f(de)h(ganancias)e(que)i
(estiman)g(gener-)118 3167 y(ar)-9 b(\023)-32 b(\020a)25
b(cada)i(d)-9 b(\023)-32 b(\020a)26 b(en)i(liquidaci\023)-42
b(on)27 b(duran)n(te)g(el)h(plazo)f(dado.)g(Las)f(ganancias)g(est\023)
-42 b(an)27 b(en)h(millones)f(de)h(p)r(esos.)p 0 TeXcolorgray
0 TeXcolorgray 467 3469 4 100 v 779 3469 V 830 3439 a(Mujer)100
b(Dep)r(ortes)f(T)-7 b(ecnolog)e(\023)-32 b(\020a)97
b(Hom)n(bres)i(Jugueter)-9 b(\023)-32 b(\020a)97 b(Deco)27
b(Hogar)p 3428 3469 V 468 3472 2962 4 v 467 3572 4 100
v 518 3542 a(2)g(d)-9 b(\023)-32 b(\020as)p 779 3572
V 165 w(40)287 b(18)370 b(28)e(14)d(12)418 b(23)p 3428
3572 V 467 3672 V 518 3642 a(3)27 b(d)-9 b(\023)-32 b(\020as)p
779 3672 V 165 w(60)287 b(25)370 b(35)e(35)d(15)418 b(33)p
3428 3672 V 467 3771 V 518 3741 a(4)27 b(d)-9 b(\023)-32
b(\020as)p 779 3771 V 165 w(75)287 b(32)370 b(50)e(40)d(18)418
b(38)p 3428 3771 V 467 3871 V 518 3841 a(5)27 b(d)-9
b(\023)-32 b(\020as)p 779 3871 V 165 w(80)287 b(48)370
b(75)e(47)d(25)418 b(42)p 3428 3871 V 467 3970 V 518
3941 a(6)27 b(d)-9 b(\023)-32 b(\020as)p 779 3970 V 165
w(80)287 b(60)370 b(92)e(55)d(32)418 b(50)p 3428 3970
V 467 4070 V 518 4040 a(7)27 b(d)-9 b(\023)-32 b(\020as)p
779 4070 V 145 w(110)265 b(75)350 b(105)c(65)365 b(35)418
b(60)p 3428 4070 V 467 4170 V 518 4140 a(8)27 b(d)-9
b(\023)-32 b(\020as)p 779 4170 V 145 w(110)265 b(78)350
b(115)c(75)365 b(39)418 b(68)p 3428 4170 V 467 4269 V
518 4239 a(9)27 b(d)-9 b(\023)-32 b(\020as)p 779 4269
V 145 w(125)265 b(85)350 b(120)c(84)365 b(45)418 b(76)p
3428 4269 V 236 4430 a(1.)31 b(Determine)h(la)f(o)h(las)f(mejores)f
(alternativ)-5 b(as)31 b(en)g(t)n(\023)-39 b(erminos)30
b(de)i(can)n(tidad)f(de)g(d)-9 b(\023)-32 b(\020as)30
b(en)i(que)f(deb)r(en)h(dejarse)331 4530 y(en)27 b(liquidaci\023)-42
b(on)27 b(cada)g(una)h(de)f(las)g(\023)-42 b(areas)26
b(de)i(la)f(empresa.)p 0 TeXcolorgray 3732 5404 a Fa(1)p
0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 118
70 a Ff(In)n(v)n(estigaci\023)-42 b(on)26 b(de)h(Op)r(eraciones)f(1)
2237 b Fe(T)-6 b(ar)l(e)l(a)30 b(3)p 118 103 3662 4 v
0 TeXcolorgray 118 277 a Fb(2.)135 b(Hidro)t(el)m(\023)-64
b(ectrica)47 b(Zeus)236 471 y Ff(La)26 b(hidro)r(el)n(\023)-39
b(ectrica)25 b(Zeus)h(deb)r(e)h(transferir)e(desde)h(su)h(represa)d(de)
j(agua,)e(ubicada)h(en)h(el)g(no)r(do)f(1)g(de)g(la)h(\014gura,)118
570 y(hacia)g(los)g(generadores,)e(ubicados)i(en)g(el)h(no)r(do)f(6)g
(de)h(la)f(\014gura.)236 682 y(En)21 b(los)g(arcos)e(se)i(de\014nen)h
(las)f(capacidades)e(que)i(cada)g(uno)g(de)g(estos)g(puede)g(man)n
(tener)g(circulando,)f(en)h(metros)118 781 y(c)r(\023)-44
b(ubicos)27 b(p)r(or)g(hora.)236 993 y(Usando)g(los)g(m)n(\023)-39
b(eto)r(dos)26 b(cono)r(cidos)h(resp)r(onda:)236 1204
y(1.)41 b(Determine)h(el)f(\015ujo)h(m\023)-42 b(aximo)40
b(que)h(puede)h(en)n(tregarse)d(a)i(los)f(generadores.)f(Realice)i(los)
f(c\023)-42 b(alculos)41 b(de)331 1303 y(forma)26 b(iterativ)-5
b(a)27 b(y)h(en)g(cada)e(una)i(esp)r(eci\014que)f(el)h(\015ujo)g(acum)n
(ulado.)236 1514 y(2.)g(F)-7 b(orm)n(ule)28 b(un)g(mo)r(delo)g(de)h
(programaci\023)-42 b(on)25 b(lineal)j(que)g(le)h(p)r(ermita)f
(satisfacer)f(las)g(restricciones)g(y)h(obtener)331 1614
y(el)f(\015ujo)h(m\023)-42 b(aximo.)236 1825 y(3.)31
b(Realice)g(el)g(mismo)g(traba)5 b(jo,)30 b(usando)h(soft)n(w)n(are)e
(LINDO)j(o)f(LPSolv)n(e.)f(Adjun)n(te)i(sus)f(c\023)-42
b(odigos)30 b(y)h(comen)n(te)331 1925 y(sus)c(resultados.)p
0 TeXcolorgray 118 5304 V 3732 5404 a Fa(2)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
